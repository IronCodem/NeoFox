{"ast":null,"code":"var _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Editor.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Prism from 'prismjs';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport styles from './../Style/Components/Editor.module.css';\nPrism.languages.markdown = Prism.languages.extend(\"markup\", {});\nPrism.languages.insertBefore(\"markdown\", \"prolog\", {\n  blockquote: {\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: \"punctuation\"\n  },\n  code: [{\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: \"keyword\"\n  }, {\n    pattern: /`\\`.+?`\\`|`[^`\\n]+`/,\n    alias: \"keyword\"\n  }],\n  title: [{\n    pattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: \"important\",\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: !0,\n    alias: \"important\",\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  hr: {\n    pattern: /(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  list: {\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  \"url-reference\": {\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      variable: {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: !0\n      },\n      'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation: /^[\\[\\]!:]|[<>]/\n    },\n    alias: \"url\"\n  },\n  bold: {\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic: {\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^[*_]|[*_]$/\n    }\n  },\n  url: {\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      variable: {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: !0\n      },\n      'string': {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\nPrism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic);\nPrism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold);\n\nconst MarkdownPreviewExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const renderLeaf = useCallback(props => __jsx(Leaf, _extends({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), []);\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  const decorate = useCallback(([node, path]) => {\n    const ranges = [];\n    if (!Text.isText(node)) return ranges;\n\n    const getLength = token => {\n      if (typeof token === 'string') return token.length;else if (typeof token.content === 'string') return token.content.length;else return token.content.reduce((l, t) => l + getLength(t), 0);\n    };\n\n    const tokens = Prism.tokenize(node.text, Prism.languages.markdown);\n    let start = 0;\n\n    for (const token of tokens) {\n      const length = getLength(token);\n      const end = start + length;\n\n      if (typeof token !== 'string') {\n        ranges.push({\n          [token.type]: true,\n          anchor: {\n            path,\n            offset: start\n          },\n          focus: {\n            path,\n            offset: end\n          }\n        });\n      }\n\n      start = end;\n    }\n\n    return ranges;\n  }, []);\n  return __jsx(\"section\", {\n    className: styles.Container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(Editable, {\n    decorate: decorate,\n    renderLeaf: renderLeaf,\n    placeholder: \"Send A Message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })));\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  let Classes = [];\n  if (leaf.bold) Classes.push(styles.Bold);\n  if (leaf.italic) Classes.push(styles.Italic);\n  if (leaf.underlined) Classes.push(styles.Underline);\n  if (leaf.title) Classes.push(styles.Title);\n  if (leaf.list) Classes.push(styles.List);\n  if (leaf.hr) Classes.push(styles.Hr);\n  if (leaf.blockquote) Classes.push(styles.Blockquote);\n  if (leaf.code) Classes.push(styles.Inline_Code);\n  return __jsx(\"span\", _extends({}, attributes, {\n    className: Classes.join(' '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), children);\n};\n\nconst initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: ''\n  }]\n}];\nexport default MarkdownPreviewExample;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Editor.tsx"],"names":["Prism","React","useState","useCallback","useMemo","Slate","Editable","withReact","Text","createEditor","withHistory","styles","languages","markdown","extend","insertBefore","blockquote","pattern","alias","code","title","inside","punctuation","lookbehind","hr","list","variable","bold","italic","url","util","clone","MarkdownPreviewExample","value","setValue","initialValue","renderLeaf","props","editor","decorate","node","path","ranges","isText","getLength","token","length","content","reduce","l","t","tokens","tokenize","text","start","end","push","type","anchor","offset","focus","Container","Leaf","attributes","children","leaf","Classes","Bold","Italic","underlined","Underline","Title","List","Hr","Blockquote","Inline_Code","join"],"mappings":"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","sourcesContent":["import Prism from 'prismjs';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor, Element, Descendant } from 'slate';\nimport { withHistory } from 'slate-history';\n\nimport styles from './../Style/Components/Editor.module.css';\n\nPrism.languages.markdown=Prism.languages.extend(\"markup\",{});\nPrism.languages.insertBefore(\"markdown\",\"prolog\", {\n  blockquote:{\n    pattern:/^>(?:[\\t ]*>)*/m,\n    alias:\"punctuation\"\n  },\n  code:[\n    {\n      pattern:/^(?: {4}|\\t).+/m,\n      alias:\"keyword\"\n    },\n    {\n      pattern:/`\\`.+?`\\`|`[^`\\n]+`/,\n      alias: \"keyword\"\n    }\n  ],\n  title:[\n    {\n      pattern:/\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n      alias:\"important\",\n      inside:{\n        punctuation:/==+$|--+$/\n      }\n    },\n    {\n      pattern:/(^\\s*)#+.+/m,\n      lookbehind:!0,\n      alias:\"important\",\n      inside:{\n        punctuation:/^#+|#+$/\n      }\n    }\n  ],\n  hr:{\n    pattern:/(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind:!0,\n    alias:\"punctuation\"\n  },\n  list:{\n    pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind:!0,\n    alias:\"punctuation\"\n  },\n  \"url-reference\":{\n    pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside:{\n      variable:{\n        pattern:/^(!?\\[)[^\\]]+/,\n        lookbehind:!0\n      },\n      'string':/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation:/^[\\[\\]!:]|[<>]/\n    },\n    alias:\"url\"\n  },\n  bold:{\n    pattern:/(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind:!0,\n    inside:{\n      punctuation:/^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic:{\n    pattern:/(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind:!0,\n    inside:{\n      punctuation:/^[*_]|[*_]$/\n    }\n  },\n  url:{\n    pattern:/!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside:{\n      variable:{\n        pattern:/(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind:!0\n      },\n      'string':{\n        pattern:/\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\nPrism.languages.markdown.bold.inside.url=Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.italic.inside.url=Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.bold.inside.italic=Prism.util.clone(Prism.languages.markdown.italic);\nPrism.languages.markdown.italic.inside.bold=Prism.util.clone(Prism.languages.markdown.bold);\n\nconst MarkdownPreviewExample = () => {\n  const [value, setValue] = useState<Descendant[]>(initialValue)\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n  const decorate = useCallback(([node, path]) => {\n    const ranges = []\n\n    if (!Text.isText(node)) return ranges;\n    const getLength = token => {\n      if (typeof token === 'string') return token.length;\n      else if (typeof token.content === 'string') return token.content.length;\n      else return token.content.reduce((l, t) => l + getLength(t), 0);\n    }\n    const tokens = Prism.tokenize(node.text, Prism.languages.markdown)\n    let start = 0\n    for (const token of tokens) {\n      const length = getLength(token)\n      const end = start + length\n\n      if (typeof token !== 'string') {\n        ranges.push({\n          [token.type]: true,\n          anchor: { path, offset: start },\n          focus: { path, offset: end },\n        })\n      }\n\n      start = end\n    }\n\n    return ranges\n  }, [])\n\n  return (\n    <section className={styles.Container}>\n      <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n        <Editable\n          decorate={decorate}\n          renderLeaf={renderLeaf}\n          placeholder=\"Send A Message\"\n        />\n      </Slate>\n    </section>\n  )\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  let Classes = [];\n  if (leaf.bold) Classes.push(styles.Bold);\n  if (leaf.italic) Classes.push(styles.Italic);\n  if (leaf.underlined) Classes.push(styles.Underline);\n  if (leaf.title) Classes.push(styles.Title);\n  if (leaf.list) Classes.push(styles.List);\n  if (leaf.hr) Classes.push(styles.Hr);\n  if (leaf.blockquote) Classes.push(styles.Blockquote);\n  if (leaf.code) Classes.push(styles.Inline_Code);\n  return (\n    <span\n      {...attributes}\n      className={Classes.join(' ')}\n    >\n      {children}\n    </span>\n  )\n}\n\nconst initialValue: Descendant[] = [\n  { type: 'paragraph', children: [{ text: '' }, ] }\n];\n\nexport default MarkdownPreviewExample;"]},"metadata":{},"sourceType":"module"}