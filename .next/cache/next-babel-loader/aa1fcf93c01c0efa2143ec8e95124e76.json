{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Servers.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore } from './../Scripts/Firebase'; //Modules \n\nimport Server from './Server';\n\nvar Servers = /*#__PURE__*/function (_React$Component) {\n  _inherits(Servers, _React$Component);\n\n  function Servers(props) {\n    var _this;\n\n    _classCallCheck(this, Servers);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Servers).call(this, props)); // create the snapshow listener\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", void 0);\n\n    firestore.collection('Users').doc(_this.props.User.uid).onSnapshot(function _callee(User) {\n      var saveMessagingDeviceToken, requestNotificationsPermissions, Server_Info, SID, Data;\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!User.exists) {\n                _context2.next = 10;\n                break;\n              }\n\n              if (User.data().Direct_Messages) _Object$entries(User.data().Direct_Messages).map(function (D) {\n                return DMS.set(D[0].trim(), D[1]);\n              });\n              $('.Guilds').replaceChildren();\n\n              _Object$entries(User.data().Servers).map(function (D) {\n                var Contain = document.createElement('div'),\n                    Out = document.createElement('picture'),\n                    Inside = document.createElement('img');\n                Inside.width = '64';\n                Inside.height = '64';\n                Inside.src = \"./media/Servers/\".concat(D[0].trim(), \"/Icon\");\n                Inside.alt = D[1];\n                Out.appendChild(Inside);\n                Contain.appendChild(Out);\n                Contain.setAttribute('onclick', 'Server_Switch(this.id)');\n\n                var _D = _slicedToArray(D, 2);\n\n                Contain.id = _D[0];\n                Contain.title = _D[1];\n                $('.Guilds').appendChild(Contain);\n                Servers.set(D[0].trim(), D);\n              });\n\n              Server_Switch(localStorage.getItem('Server') && (Servers.has(localStorage.getItem('Server')) || localStorage.getItem('Server') == 'DM' && DMS.has(Storage)) ? localStorage.getItem('Server') : Servers.keys().next().value, localStorage.getItem('Channel')); // Saves the messaging device token to the datastore.\n\n              saveMessagingDeviceToken = function saveMessagingDeviceToken() {\n                messaging.getToken().then(function (currentToken) {\n                  if (currentToken) {\n                    db.collection('Users').doc(auth.currentUser.uid).update({\n                      Messaging: firebase.firestore.FieldValue.arrayUnion(currentToken)\n                    })[\"catch\"](function () {});\n                  } else {\n                    requestNotificationsPermissions();\n                  }\n                })[\"catch\"](function () {});\n              }; // Requests permissions to show notifications.\n\n\n              requestNotificationsPermissions = function requestNotificationsPermissions() {\n                messaging.requestPermission().then(function () {\n                  return saveMessagingDeviceToken();\n                })[\"catch\"](function () {});\n              };\n\n              saveMessagingDeviceToken();\n              _context2.next = 16;\n              break;\n\n            case 10:\n              // Make the user a profile with the basic server\n              Server_Info = function Server_Info(Server_ID) {\n                var Document, doc;\n                return _regeneratorRuntime.async(function Server_Info$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        Document = db.collection('Servers').doc(Server_ID);\n                        _context.next = 3;\n                        return _regeneratorRuntime.awrap(Document.get()[\"catch\"](function () {\n                          return 'Banned';\n                        }));\n\n                      case 3:\n                        doc = _context.sent;\n                        return _context.abrupt(\"return\", {\n                          Name: doc && doc != 'Banned' && doc.exists ? doc.data().Name : null,\n                          Banned: doc == 'Banned' ? true : false\n                        });\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                });\n              };\n\n              SID = 'UUw40MdRDcUxdEy00Zuo';\n              _context2.next = 14;\n              return _regeneratorRuntime.awrap(Server_Info(SID, db));\n\n            case 14:\n              Data = _context2.sent;\n\n              if (!Data.Banned) {\n                db.collection('Users').doc(user.uid).set({\n                  Servers: _defineProperty({}, SID, Data.Name)\n                })[\"catch\"](function (err) {\n                  console.log(err);\n                });\n              }\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }, function () {}); // state\n\n    _this.state = {\n      Active: '123',\n      Servers: new _Map([['123', 'Testing'], ['UUw40MdRDcUxdEy00Zuo', 'Tes']])\n    };\n\n    _this.props.Server_Select(_this.state.Active, _this.state.Servers.get(_this.state.Active));\n\n    return _this;\n  }\n\n  _createClass(Servers, [{\n    key: \"Change_Server\",\n    value: function Change_Server(evt, child) {\n      this.setState({\n        Active: child\n      });\n      this.props.Server_Select(child, this.state.Servers.get(child));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"section\", {\n        className: styles.Container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, function () {\n        var Comps = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _getIterator(_this2.state.Servers), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                value = _step$value[1];\n\n            Comps.push(__jsx(Server, {\n              key: key,\n              id: key,\n              Name: value,\n              Active: _this2.state.Active,\n              customClickEvent: _this2.Change_Server.bind(_this2),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 104\n              },\n              __self: this\n            }));\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return Comps;\n      }(), __jsx(Server, {\n        id: this.props.User.uid,\n        Name: this.props.User.displayName,\n        Active: this.state.Active,\n        customClickEvent: this.Change_Server.bind(this),\n        Self: this.props.User.photoURL,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Servers;\n}(React.Component);\n\nexport default Servers;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Servers.tsx"],"names":["React","styles","firestore","Server","Servers","props","collection","doc","User","uid","onSnapshot","exists","data","Direct_Messages","map","D","DMS","set","trim","$","replaceChildren","Contain","document","createElement","Out","Inside","width","height","src","alt","appendChild","setAttribute","id","title","Server_Switch","localStorage","getItem","has","Storage","keys","next","value","saveMessagingDeviceToken","messaging","getToken","then","currentToken","db","auth","currentUser","update","Messaging","firebase","FieldValue","arrayUnion","requestNotificationsPermissions","requestPermission","Server_Info","Server_ID","Document","get","Name","Banned","SID","Data","user","err","console","log","state","Active","Server_Select","evt","child","setState","Container","Comps","key","push","Change_Server","bind","displayName","photoURL","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore } from './../Scripts/Firebase';\n//Modules \nimport Server from './Server';\ntype MyProps = { Server_Select: Function, User: any };\ntype MyState = { Active: string, Servers: Map<string, string> };\nclass Servers extends React.Component<MyProps, MyState> {\n  public state: MyState;\n  constructor(props) {\n    super(props);\n    // create the snapshow listener\n     firestore.collection('Users').doc(this.props.User.uid).onSnapshot(async User => {\n        if (User.exists) {\n          if (User.data().Direct_Messages)\n            Object.entries(User.data().Direct_Messages).map(D => DMS.set(D[0].trim(), D[1]));\n          $('.Guilds').replaceChildren();\n          Object.entries(User.data().Servers).map(D => {\n            let Contain = document.createElement('div'), \n                Out = document.createElement('picture'), \n                Inside = document.createElement('img');\n            Inside.width = '64';\n            Inside.height = '64';\n            Inside.src = `./media/Servers/${D[0].trim()}/Icon`;\n            Inside.alt = D[1];\n            Out.appendChild(Inside);\n            Contain.appendChild(Out);\n            Contain.setAttribute('onclick', 'Server_Switch(this.id)');\n            [Contain.id, Contain.title] = D;\n            $('.Guilds').appendChild(Contain);\n            Servers.set(D[0].trim(), D);\n          });\n          Server_Switch(\n            localStorage.getItem('Server') && (\n              Servers.has(localStorage.getItem('Server')) || (\n                localStorage.getItem('Server') == 'DM' && DMS.has(Storage)\n              )\n            ) ? localStorage.getItem('Server') : Servers.keys().next().value, \n            localStorage.getItem('Channel')\n          );\n          // Saves the messaging device token to the datastore.\n          let saveMessagingDeviceToken = () => {\n            messaging.getToken().then(currentToken => {\n              if (currentToken) {\n                db.collection('Users').doc(auth.currentUser.uid).update({ Messaging: firebase.firestore.FieldValue.arrayUnion(currentToken) }).catch(() => {});\n              } else {\n                requestNotificationsPermissions();\n              }\n            }).catch(() => {});\n          }\n          // Requests permissions to show notifications.\n          let requestNotificationsPermissions = () => {\n            messaging.requestPermission().then(() => saveMessagingDeviceToken()).catch(() => {});\n          }\n          saveMessagingDeviceToken();\n        } else {\n          // Make the user a profile with the basic server\n          let Server_Info = async (Server_ID)  => {\n            let Document = db.collection('Servers').doc(Server_ID);\n            let doc = await Document.get().catch(() => 'Banned');\n            return {\n              Name: doc && doc != 'Banned' && doc.exists ? doc.data().Name : null,\n              Banned: doc == 'Banned' ? true : false\n            }\n          }\n          let SID = 'UUw40MdRDcUxdEy00Zuo';\n          let Data = await Server_Info(SID, db);\n          if (!Data.Banned) {\n            db.collection('Users').doc(user.uid).set({\n              Servers: { [SID]: Data.Name }\n            }).catch(err => { console.log(err)});\n          }\n        }\n      }, () => {}\n    )\n    // state\n    this.state = {\n      Active: '123',\n      Servers: new Map([\n        [ '123', 'Testing' ],\n        [ 'UUw40MdRDcUxdEy00Zuo', 'Tes' ]\n      ])\n    };\n    this.props.Server_Select(\n      this.state.Active,\n      this.state.Servers.get(this.state.Active)\n    )\n  }\n  Change_Server(evt, child) {\n    this.setState({Active: child});\n    this.props.Server_Select(\n       child,\n      this.state.Servers.get(child)\n    )\n  }\n  render() {\n    return (\n      <section className={styles.Container}>\n        {\n          (() => {\n            let Comps = [];\n            for (let [key, value] of this.state.Servers) {\n              Comps.push(\n                <Server \n                  key={key}\n                  id={key}\n                  Name={value}\n                  Active={this.state.Active}\n                  customClickEvent={this.Change_Server.bind(this)}\n                />\n              );\n            }\n            return Comps;\n          })()\n        }\n        <Server id={this.props.User.uid} Name={this.props.User.displayName} Active={this.state.Active} customClickEvent={this.Change_Server.bind(this)} Self={this.props.User.photoURL}/>\n      </section>\n    );\n  }\n}\n\nexport default Servers;"]},"metadata":{},"sourceType":"module"}