{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Editor.tsx\";\nvar __jsx = React.createElement;\nimport Prism from 'prismjs';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport styles from './../Style/Components/Editor.module.css';\nPrism.languages.markdown = Prism.languages.extend(\"markup\", {});\nPrism.languages.insertBefore(\"markdown\", \"prolog\", {\n  blockquote: {\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: \"punctuation\"\n  },\n  code: [{\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: \"keyword\"\n  }, {\n    pattern: /`\\`.+?`\\`|`[^`\\n]+`/,\n    alias: \"keyword\"\n  }],\n  title: [{\n    pattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: \"important\",\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: !0,\n    alias: \"important\",\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  hr: {\n    pattern: /(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  list: {\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  \"url-reference\": {\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      variable: {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: !0\n      },\n      'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation: /^[\\[\\]!:]|[<>]/\n    },\n    alias: \"url\"\n  },\n  bold: {\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic: {\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^[*_]|[*_]$/\n    }\n  },\n  url: {\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      variable: {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: !0\n      },\n      'string': {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\nPrism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic);\nPrism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold);\nvar initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: ''\n  }]\n}];\n\nvar MarkdownPreviewExample = function MarkdownPreviewExample() {\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var renderLeaf = useCallback(function (props) {\n    return __jsx(Leaf, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n  }, []);\n  var editor = useMemo(function () {\n    return withHistory(withReact(createEditor()));\n  }, []);\n  var decorate = useCallback(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        node = _ref2[0],\n        path = _ref2[1];\n\n    if (!Text.isText(node)) return [];\n    var ranges = [],\n        tokens = Prism.tokenize(node.text, Prism.languages.markdown);\n\n    var getLength = function getLength(token) {\n      if (typeof token === 'string') return token.length;else if (typeof token.content === 'string') return token.content.length;else return token.content.reduce(function (l, t) {\n        return l + getLength(t);\n      }, 0);\n    };\n\n    var start = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(tokens), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var token = _step.value;\n        var end = start + getLength(token);\n\n        if (typeof token !== 'string') {\n          var _ranges$push;\n\n          ranges.push((_ranges$push = {}, _defineProperty(_ranges$push, token.type, true), _defineProperty(_ranges$push, \"anchor\", {\n            path: path,\n            offset: start\n          }), _defineProperty(_ranges$push, \"focus\", {\n            path: path,\n            offset: end\n          }), _ranges$push));\n        }\n\n        start = end;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return ranges;\n  }, []);\n  return __jsx(\"section\", {\n    className: styles.Container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, __jsx(Editable, {\n    decorate: decorate,\n    renderLeaf: renderLeaf,\n    placeholder: \"Send A Message\",\n    onKeyDown: function onKeyDown(event) {\n      if (!event.ctrlKey) {\n        return;\n      }\n\n      switch (event.key) {\n        case '`':\n          {\n            event.preventDefault();\n\n            var _Editor$nodes = Editor.nodes(editor, {\n              match: function match(n) {\n                return n.type === 'code';\n              }\n            }),\n                _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n                match = _Editor$nodes2[0];\n\n            Transforms.setNodes(editor, {\n              type: match ? null : 'code'\n            }, {\n              match: function match(n) {\n                return Editor.isBlock(editor, n);\n              }\n            });\n            break;\n          }\n\n        case 'b':\n          {\n            event.preventDefault();\n            Transforms.setNodes(editor, {\n              bold: true\n            }, {\n              match: function match(n) {\n                return Text.isText(n);\n              },\n              split: true\n            });\n            break;\n          }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  })));\n};\n\nvar Leaf = function Leaf(_ref3) {\n  var attributes = _ref3.attributes,\n      children = _ref3.children,\n      leaf = _ref3.leaf;\n  var Classes = [];\n  if (leaf.bold) Classes.push(styles.Bold);\n  if (leaf.italic) Classes.push(styles.Italic);\n  if (leaf.underlined) Classes.push(styles.Underline);\n  if (leaf.title) Classes.push(styles.Title);\n  if (leaf.list) Classes.push(styles.List);\n  if (leaf.hr) Classes.push(styles.Hr);\n  if (leaf.blockquote) Classes.push(styles.Blockquote);\n  if (leaf.code) Classes.push(styles.Inline_Code);\n  return __jsx(\"span\", _extends({}, attributes, {\n    className: Classes.join(' '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }), children);\n};\n\nexport default MarkdownPreviewExample;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Editor.tsx"],"names":["Prism","React","useState","useCallback","useMemo","Slate","Editable","withReact","Text","createEditor","withHistory","styles","languages","markdown","extend","insertBefore","blockquote","pattern","alias","code","title","inside","punctuation","lookbehind","hr","list","variable","bold","italic","url","util","clone","initialValue","type","children","text","MarkdownPreviewExample","value","setValue","renderLeaf","props","editor","decorate","node","path","isText","ranges","tokens","tokenize","getLength","token","length","content","reduce","l","t","start","end","push","offset","Container","event","ctrlKey","key","preventDefault","Editor","nodes","match","n","Transforms","setNodes","isBlock","split","Leaf","attributes","leaf","Classes","Bold","Italic","underlined","Underline","Title","List","Hr","Blockquote","Inline_Code","join"],"mappings":"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","sourcesContent":["import Prism from 'prismjs';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor, Element, Descendant } from 'slate';\nimport { withHistory } from 'slate-history';\n\nimport styles from './../Style/Components/Editor.module.css';\n\nPrism.languages.markdown=Prism.languages.extend(\"markup\",{});\nPrism.languages.insertBefore(\"markdown\",\"prolog\", {\n  blockquote:{\n    pattern:/^>(?:[\\t ]*>)*/m,\n    alias:\"punctuation\"\n  },\n  code:[\n    {\n      pattern:/^(?: {4}|\\t).+/m,\n      alias:\"keyword\"\n    },\n    {\n      pattern:/`\\`.+?`\\`|`[^`\\n]+`/,\n      alias: \"keyword\"\n    }\n  ],\n  title:[\n    {\n      pattern:/\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n      alias:\"important\",\n      inside:{\n        punctuation:/==+$|--+$/\n      }\n    },\n    {\n      pattern:/(^\\s*)#+.+/m,\n      lookbehind:!0,\n      alias:\"important\",\n      inside:{\n        punctuation:/^#+|#+$/\n      }\n    }\n  ],\n  hr:{\n    pattern:/(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind:!0,\n    alias:\"punctuation\"\n  },\n  list:{\n    pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind:!0,\n    alias:\"punctuation\"\n  },\n  \"url-reference\":{\n    pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside:{\n      variable:{\n        pattern:/^(!?\\[)[^\\]]+/,\n        lookbehind:!0\n      },\n      'string':/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation:/^[\\[\\]!:]|[<>]/\n    },\n    alias:\"url\"\n  },\n  bold:{\n    pattern:/(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind:!0,\n    inside:{\n      punctuation:/^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic:{\n    pattern:/(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind:!0,\n    inside:{\n      punctuation:/^[*_]|[*_]$/\n    }\n  },\n  url:{\n    pattern:/!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside:{\n      variable:{\n        pattern:/(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind:!0\n      },\n      'string':{\n        pattern:/\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\nPrism.languages.markdown.bold.inside.url=Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.italic.inside.url=Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.bold.inside.italic=Prism.util.clone(Prism.languages.markdown.italic);\nPrism.languages.markdown.italic.inside.bold=Prism.util.clone(Prism.languages.markdown.bold);\n\nconst initialValue: Descendant[] = [{ type: 'paragraph', children: [{ text: '' }, ] }];\nconst MarkdownPreviewExample = () => {\n  const [value, setValue] = useState<Descendant[]>(initialValue)\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n  const decorate = useCallback(([node, path]) => {\n    if (!Text.isText(node)) return [];\n    const ranges = [], tokens = Prism.tokenize(node.text, Prism.languages.markdown);\n    const getLength = token => {\n      if (typeof token === 'string') return token.length;\n      else if (typeof token.content === 'string') return token.content.length;\n      else return token.content.reduce((l, t) => l + getLength(t), 0);\n    }\n    let start = 0;\n    for (const token of tokens) {\n      const end = start + getLength(token);\n      if (typeof token !== 'string') {\n        ranges.push({\n          [token.type]: true,\n          anchor: { path, offset: start },\n          focus: { path, offset: end },\n        });\n      }\n      start = end;\n    }\n    return ranges;\n  }, [])\n  return (\n    <section className={styles.Container}>\n      <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n        <Editable\n          decorate={decorate}\n          renderLeaf={renderLeaf}\n          placeholder=\"Send A Message\"\n          onKeyDown={event => {\n          if (!event.ctrlKey) {\n            return\n          }\n\n          switch (event.key) {\n            case '`': {\n              event.preventDefault()\n              const [match] = Editor.nodes(editor, {\n                match: n => n.type === 'code',\n              })\n              Transforms.setNodes(\n                editor,\n                { type: match ? null : 'code' },\n                { match: n => Editor.isBlock(editor, n) }\n              )\n              break\n            }\n\n            case 'b': {\n              event.preventDefault()\n              Transforms.setNodes(\n                editor,\n                { bold: true },\n                { match: n => Text.isText(n), split: true }\n              )\n              break\n            }\n          }\n        }}\n        />\n      </Slate>\n    </section>\n  )\n}\nconst Leaf = ({ attributes, children, leaf }) => {\n  let Classes = [];\n  if (leaf.bold) Classes.push(styles.Bold);\n  if (leaf.italic) Classes.push(styles.Italic);\n  if (leaf.underlined) Classes.push(styles.Underline);\n  if (leaf.title) Classes.push(styles.Title);\n  if (leaf.list) Classes.push(styles.List);\n  if (leaf.hr) Classes.push(styles.Hr);\n  if (leaf.blockquote) Classes.push(styles.Blockquote);\n  if (leaf.code) Classes.push(styles.Inline_Code);\n  return (<span {...attributes} className={Classes.join(' ')}>{children}</span>);\n}\nexport default MarkdownPreviewExample;"]},"metadata":{},"sourceType":"module"}