{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Messages.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport styles from './../Style/Components/Messages.module.css';\nimport { firestore } from './../Scripts/Firebase';\nimport Message from './Message';\n\nclass Messages extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      Messages: new Map()\n    });\n\n    firestore.collection(`Servers/${this.props.SID}/Messages`).limit(7).orderBy('Created', 'desc').onSnapshot(async Server => {\n      let Msgs = this.state.Messages;\n      Server.docChanges().forEach(Msg => {\n        if (Msg.type != 'removed') {\n          const Data = Msg.doc.data();\n          if (!Data.Created) return;\n          Msgs.set(Msg.doc.id, {\n            Time: Data.Created.toMillis(),\n            Msg: /*#__PURE__*/_jsxDEV(Message, {\n              Self: this.props.User,\n              Owner: Data.UID,\n              Username: Data.Owner,\n              Picture: Data.Picture,\n              Content: Data.Content,\n              Time: D\n            }, Msg.doc.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 17\n            }, this)\n          });\n        } else Msgs.delete(Msg.doc.id);\n      });\n      this.setState({\n        Messages: new Map([...Msgs.entries()].sort((a, b) => b[1].Time - a[1].Time))\n      });\n    }, () => {});\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.Container,\n      children: [...this.state.Messages].map(e => e[1].Msg)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Messages;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Messages.tsx"],"names":["React","styles","firestore","Message","Messages","Component","constructor","props","Map","collection","SID","limit","orderBy","onSnapshot","Server","Msgs","state","docChanges","forEach","Msg","type","Data","doc","data","Created","set","id","Time","toMillis","User","UID","Owner","Picture","Content","D","delete","setState","entries","sort","a","b","render","Container","map","e"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,2CAAnB;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,OAAOC,OAAP,MAAoB,WAApB;;AAKA,MAAMC,QAAN,SAAuBJ,KAAK,CAACK,SAA7B,CAAyD;AAEvDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,mCADK;AAAEH,MAAAA,QAAQ,EAAE,IAAII,GAAJ;AAAZ,KACL;;AAEjBN,IAAAA,SAAS,CAACO,UAAV,CAAsB,WAAU,KAAKF,KAAL,CAAWG,GAAI,WAA/C,EAA2DC,KAA3D,CAAiE,CAAjE,EAAoEC,OAApE,CAA4E,SAA5E,EAAuF,MAAvF,EACGC,UADH,CACc,MAAMC,MAAN,IAAgB;AAC1B,UAAIC,IAAgC,GAAG,KAAKC,KAAL,CAAWZ,QAAlD;AACAU,MAAAA,MAAM,CAACG,UAAP,GAAoBC,OAApB,CAA4BC,GAAG,IAAI;AACjC,YAAIA,GAAG,CAACC,IAAJ,IAAY,SAAhB,EAA2B;AACzB,gBAAMC,IAAI,GAAGF,GAAG,CAACG,GAAJ,CAAQC,IAAR,EAAb;AACA,cAAI,CAACF,IAAI,CAACG,OAAV,EAAmB;AACnBT,UAAAA,IAAI,CAACU,GAAL,CAASN,GAAG,CAACG,GAAJ,CAAQI,EAAjB,EAAqB;AACnBC,YAAAA,IAAI,EAAEN,IAAI,CAACG,OAAL,CAAaI,QAAb,EADa;AAEnBT,YAAAA,GAAG,eACD,QAAC,OAAD;AAEE,cAAA,IAAI,EAAE,KAAKZ,KAAL,CAAWsB,IAFnB;AAGE,cAAA,KAAK,EAAER,IAAI,CAACS,GAHd;AAIE,cAAA,QAAQ,EAAET,IAAI,CAACU,KAJjB;AAKE,cAAA,OAAO,EAAEV,IAAI,CAACW,OALhB;AAME,cAAA,OAAO,EAAEX,IAAI,CAACY,OANhB;AAOE,cAAA,IAAI,EAAEC;AAPR,eACOf,GAAG,CAACG,GAAJ,CAAQI,EADf;AAAA;AAAA;AAAA;AAAA;AAHiB,WAArB;AAcD,SAjBD,MAiBOX,IAAI,CAACoB,MAAL,CAAYhB,GAAG,CAACG,GAAJ,CAAQI,EAApB;AACR,OAnBD;AAoBA,WAAKU,QAAL,CAAc;AACZhC,QAAAA,QAAQ,EAAE,IAAII,GAAJ,CAAQ,CAAC,GAAGO,IAAI,CAACsB,OAAL,EAAJ,EAAoBC,IAApB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAAC,CAAD,CAAD,CAAKb,IAAL,GAAUY,CAAC,CAAC,CAAD,CAAD,CAAKZ,IAAlD,CAAR;AADE,OAAd;AAGD,KA1BH,EA0BK,MAAM,CAAE,CA1Bb;AA4BD;;AACDc,EAAAA,MAAM,GAAG;AACP,wBACE;AAAS,MAAA,SAAS,EAAExC,MAAM,CAACyC,SAA3B;AAAA,gBACG,CAAC,GAAG,KAAK1B,KAAL,CAAWZ,QAAf,EAAyBuC,GAAzB,CAA6BC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAKzB,GAAvC;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAvCsD;;AAyCzD,eAAef,QAAf","sourcesContent":["import React from 'react';\n\nimport styles from './../Style/Components/Messages.module.css';\n\nimport { firestore } from './../Scripts/Firebase';\n\nimport Message from './Message';\n\ntype MyProps = { SID: string, User: any };\ntype Message_Entry = { Time: number, Msg: Message };\ntype MyState = { Messages: Map<string, Message_Entry> };\nclass Messages extends React.Component<MyProps, MyState> {\n  public state: MyState = { Messages: new Map() };\n  constructor(props) {\n    super(props);\n    firestore.collection(`Servers/${this.props.SID}/Messages`).limit(7).orderBy('Created', 'desc')\n      .onSnapshot(async Server => {\n        let Msgs: Map<string, Message_Entry> = this.state.Messages;\n        Server.docChanges().forEach(Msg => {\n          if (Msg.type != 'removed') {\n            const Data = Msg.doc.data();\n            if (!Data.Created) return;\n            Msgs.set(Msg.doc.id, {\n              Time: Data.Created.toMillis(),\n              Msg: (\n                <Message \n                  key={Msg.doc.id}\n                  Self={this.props.User}\n                  Owner={Data.UID}\n                  Username={Data.Owner}\n                  Picture={Data.Picture}\n                  Content={Data.Content}\n                  Time={D}\n                />\n              )\n            });\n          } else Msgs.delete(Msg.doc.id);\n        });\n        this.setState({\n          Messages: new Map([...Msgs.entries()].sort((a, b) => b[1].Time-a[1].Time))\n        });\n      }, () => {}\n    )\n  }\n  render() {\n    return (\n      <section className={styles.Container}>\n        {[...this.state.Messages].map(e => e[1].Msg)}\n      </section>\n    );\n  }\n}\nexport default Messages;"]},"metadata":{},"sourceType":"module"}