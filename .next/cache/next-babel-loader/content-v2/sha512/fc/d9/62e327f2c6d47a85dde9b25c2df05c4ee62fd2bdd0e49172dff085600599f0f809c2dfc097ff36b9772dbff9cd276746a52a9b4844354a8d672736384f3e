{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Servers.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore, firebase } from './../Scripts/Firebase'; //Modules \n\nimport Server from './Server';\n\nclass Servers extends React.Component {\n  constructor(props) {\n    super(props); // create the snapshow listener\n\n    _defineProperty(this, \"state\", {\n      Active: '',\n      Servers: new Map()\n    });\n\n    firestore.collection('Users').doc(this.props.User.uid).onSnapshot(async User => {\n      if (User.exists) {\n        let data = User.data();\n        let Saved_Active = localStorage.getItem('Server');\n        let Active = Saved_Active && Object.keys(data.Servers).includes(Saved_Active) ? Saved_Active : Object.keys(data.Servers)[0];\n        let Servers = new Map(Object.entries(data.Servers));\n        this.setState({\n          Active,\n          Servers\n        });\n        this.props.Server_Select(Active, Servers.get(Active));\n      } else {\n        // Make the user a profile with the basic server\n        let Server_Info = async Server_ID => {\n          let Document = firestore.collection('Servers').doc(Server_ID);\n          let doc = await Document.get().catch(() => 'Banned');\n          return {\n            Name: doc && doc != 'Banned' && doc.exists ? doc.data().Name : null,\n            Banned: doc == 'Banned' ? true : false\n          };\n        };\n\n        let SID = 'UUw40MdRDcUxdEy00Zuo';\n        let Data = await Server_Info(SID);\n\n        if (!Data.Banned) {\n          firestore.collection('Users').doc(this.props.User.uid).set({\n            Servers: {\n              [SID]: Data.Name\n            }\n          }).catch(err => {\n            console.log(err);\n          });\n        }\n      } // deal with the user not having any servers\n\n    }, () => {});\n  }\n\n  Change_Server(evt, child) {\n    this.setState({\n      Active: child\n    });\n    this.props.Server_Select(child, this.state.Servers.get(child));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.Container,\n      children: [(() => {\n        let Comps = [];\n\n        for (let [key, value] of this.state.Servers) {\n          Comps.push( /*#__PURE__*/_jsxDEV(Server, {\n            id: key,\n            Name: value,\n            Active: this.state.Active,\n            customClickEvent: this.Change_Server.bind(this)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this));\n        }\n\n        return Comps;\n      })(), /*#__PURE__*/_jsxDEV(Server, {\n        id: this.props.User.uid,\n        Name: this.props.User.displayName,\n        Active: this.state.Active,\n        customClickEvent: firebase.auth().signOut(),\n        Self: this.props.User.photoURL,\n        onClick: () => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Servers;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Servers.tsx"],"names":["React","styles","firestore","firebase","Server","Servers","Component","constructor","props","Active","Map","collection","doc","User","uid","onSnapshot","exists","data","Saved_Active","localStorage","getItem","Object","keys","includes","entries","setState","Server_Select","get","Server_Info","Server_ID","Document","catch","Name","Banned","SID","Data","set","err","console","log","Change_Server","evt","child","state","render","Container","Comps","key","value","push","bind","displayName","auth","signOut","photoURL"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore, firebase } from './../Scripts/Firebase';\n//Modules \nimport Server from './Server';\ntype MyProps = { Server_Select: Function, User: any };\ntype MyState = { Active: string, Servers: Map<string, string> };\nclass Servers extends React.Component<MyProps, MyState> {\n  public state: MyState = { Active: '', Servers: new Map() };\n  constructor(props) {\n    super(props);\n    // create the snapshow listener\n    firestore.collection('Users').doc(this.props.User.uid).onSnapshot(async User => {\n        if (User.exists) {\n          let data = User.data();\n          let Saved_Active = localStorage.getItem('Server');\n          let Active: string = (Saved_Active && Object.keys(data.Servers).includes(Saved_Active)) ? Saved_Active : Object.keys(data.Servers)[0];\n          let Servers: Map<string, string> = new Map(Object.entries(data.Servers));\n          this.setState({ Active, Servers });\n          this.props.Server_Select(Active, Servers.get(Active))\n        } else {\n          // Make the user a profile with the basic server\n          let Server_Info = async (Server_ID: string)  => {\n            let Document = firestore.collection('Servers').doc(Server_ID);\n            let doc = await Document.get().catch(() => 'Banned');\n            return {\n              Name: doc && doc != 'Banned' && doc.exists ? doc.data().Name : null,\n              Banned: doc == 'Banned' ? true : false\n            }\n          }\n          let SID = 'UUw40MdRDcUxdEy00Zuo';\n          let Data = await Server_Info(SID);\n          if (!Data.Banned) {\n            firestore.collection('Users').doc(this.props.User.uid).set({\n              Servers: { [SID]: Data.Name }\n            }).catch(err => { console.log(err)});\n          }\n        }\n        // deal with the user not having any servers\n      }, () => {}\n    )\n  }\n  Change_Server(evt, child) {\n    this.setState({Active: child});\n    this.props.Server_Select(child,this.state.Servers.get(child))\n  }\n  render() {\n    return (\n      <section className={styles.Container}>\n        {\n          (() => {\n            let Comps = [];\n            for (let [key, value] of this.state.Servers) {\n              Comps.push(\n                <Server \n                  key={key}\n                  id={key}\n                  Name={value}\n                  Active={this.state.Active}\n                  customClickEvent={this.Change_Server.bind(this)}\n                />\n              );\n            }\n            return Comps;\n          })()\n        }\n        <Server id={this.props.User.uid} Name={this.props.User.displayName} Active={this.state.Active} customClickEvent={firebase.auth().signOut()} Self={this.props.User.photoURL} onClick={() => {  }}/>\n      </section>\n    );\n  }\n}\n\nexport default Servers;"]},"metadata":{},"sourceType":"module"}