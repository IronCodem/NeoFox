{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Editor.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Prism from 'prismjs';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor, Node } from 'slate';\nimport { withHistory } from 'slate-history';\nimport styles from './../Style/Components/Editor.module.css';\nimport Marked from './../Scripts/Marked';\nimport { Send } from './../Scripts/Chatter'; // ts stuff\n\nPrism.languages.markdown = Prism.languages.extend(\"markup\", {});\nPrism.languages.insertBefore(\"markdown\", \"prolog\", {\n  blockquote: {\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: \"punctuation\"\n  },\n  code: [{\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: \"keyword\"\n  }, {\n    pattern: /`\\`.+?`\\`|`[^`\\n]+`/,\n    alias: \"keyword\"\n  }],\n  title: [{\n    pattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: \"important\",\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: !0,\n    alias: \"important\",\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  hr: {\n    pattern: /(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  list: {\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  \"url-reference\": {\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      variable: {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: !0\n      },\n      'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation: /^[\\[\\]!:]|[<>]/\n    },\n    alias: \"url\"\n  },\n  bold: {\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic: {\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^[*_]|[*_]$/\n    }\n  },\n  url: {\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      variable: {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: !0\n      },\n      'string': {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\nPrism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic);\nPrism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold);\n\nconst serialize = nodes => nodes.map(n => Node.string(n)).join('\\n');\n\nconst initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: ''\n  }]\n}];\n\nfunction Editor(props) {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const renderLeaf = useCallback(props => /*#__PURE__*/_jsxDEV(Leaf, _objectSpread({}, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 43\n  }, this), []);\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  const decorate = useCallback(([node, path]) => {\n    if (!Text.isText(node)) return [];\n    const ranges = []; // const tokens = Prism.tokenize(node.text, Prism.languages.markdown);\n\n    const Marked_Tokens = Marked.lexer(node.text); // console.log(tokens);\n    // console.log(Marked_Tokens);\n    // console.log('==========');\n    // const getLength = token => {\n    //   if (typeof token === 'string') return token.length;\n    //   else if (typeof token.content === 'string') return token.content.length;\n    //   else return token.content.reduce((l, t) => l + getLength(t), 0);\n    // }\n    // let start = 0;\n    // for (const token of tokens) {\n    //   console.log(token);\n    //   const end = start + getLength(token);\n    //   if (typeof token !== 'string') {\n    //     ranges.push({\n    //       [token.type]: true,\n    //       anchor: { path, offset: start },\n    //       focus: { path, offset: end },\n    //     });\n    //   }\n    //   start = end;\n    // }\n    // console.log(ranges);\n    // return ranges;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: styles.Container,\n    children: /*#__PURE__*/_jsxDEV(Slate, {\n      editor: editor,\n      value: value,\n      onChange: value => setValue(value),\n      children: /*#__PURE__*/_jsxDEV(Editable, {\n        decorate: decorate,\n        renderLeaf: renderLeaf,\n        placeholder: \"Send A Message\",\n        onKeyDown: e => {\n          if (e.keyCode == 13 && !e.shiftKey) {\n            e.preventDefault();\n            if (serialize(value).trim().length == 0) return;\n            Send(props.User, props.SID, serialize(value));\n            editor.selection = {\n              anchor: {\n                path: [0, 0],\n                offset: 0\n              },\n              focus: {\n                path: [0, 0],\n                offset: 0\n              }\n            };\n            setValue(initialValue);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  let Classes = [];\n  if (leaf.bold) Classes.push(styles.Bold);\n  if (leaf.italic) Classes.push(styles.Italic);\n  if (leaf.underlined) Classes.push(styles.Underline);\n  if (leaf.title) Classes.push(styles.Title);\n  if (leaf.list) Classes.push(styles.List);\n  if (leaf.hr) Classes.push(styles.Hr);\n  if (leaf.blockquote) Classes.push(styles.Blockquote);\n  if (leaf.code) Classes.push(styles.Inline_Code);\n  return /*#__PURE__*/_jsxDEV(\"span\", _objectSpread(_objectSpread({}, attributes), {}, {\n    className: Classes.join(' '),\n    children: children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 11\n  }, this);\n};\n\nexport default Editor;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Editor.tsx"],"names":["Prism","React","useState","useCallback","useMemo","Slate","Editable","withReact","Text","createEditor","Node","withHistory","styles","Marked","Send","languages","markdown","extend","insertBefore","blockquote","pattern","alias","code","title","inside","punctuation","lookbehind","hr","list","variable","bold","italic","url","util","clone","serialize","nodes","map","n","string","join","initialValue","type","children","text","Editor","props","value","setValue","renderLeaf","editor","decorate","node","path","isText","ranges","Marked_Tokens","lexer","Container","e","keyCode","shiftKey","preventDefault","trim","length","User","SID","selection","anchor","offset","focus","Leaf","attributes","leaf","Classes","push","Bold","Italic","underlined","Underline","Title","List","Hr","Blockquote","Inline_Code"],"mappings":"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","sourcesContent":["import Prism from 'prismjs';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor, Element, Descendant, Node } from 'slate';\nimport { withHistory } from 'slate-history';\n\nimport styles from './../Style/Components/Editor.module.css';\n\nimport Marked from './../Scripts/Marked';\nimport { Send } from './../Scripts/Chatter';\n\n// ts stuff\ntype CustomText = { text: string; bold: boolean; italic: boolean }\n\ndeclare module 'slate' {\n  interface CustomTypes {\n    Editor: BaseEditor & ReactEditor & HistoryEditor\n    Element: { type: 'paragraph'; children: CustomText[] }\n    Text: CustomText\n  }\n}\nPrism.languages.markdown=Prism.languages.extend(\"markup\",{});\nPrism.languages.insertBefore(\"markdown\",\"prolog\", {\n  blockquote:{\n    pattern:/^>(?:[\\t ]*>)*/m,\n    alias:\"punctuation\"\n  },\n  code:[\n    {\n      pattern:/^(?: {4}|\\t).+/m,\n      alias:\"keyword\"\n    },\n    {\n      pattern:/`\\`.+?`\\`|`[^`\\n]+`/,\n      alias: \"keyword\"\n    }\n  ],\n  title:[\n    {\n      pattern:/\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n      alias:\"important\",\n      inside:{\n        punctuation:/==+$|--+$/\n      }\n    },\n    {\n      pattern:/(^\\s*)#+.+/m,\n      lookbehind:!0,\n      alias:\"important\",\n      inside:{\n        punctuation:/^#+|#+$/\n      }\n    }\n  ],\n  hr:{\n    pattern:/(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind:!0,\n    alias:\"punctuation\"\n  },\n  list:{\n    pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind:!0,\n    alias:\"punctuation\"\n  },\n  \"url-reference\":{\n    pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside:{\n      variable:{\n        pattern:/^(!?\\[)[^\\]]+/,\n        lookbehind:!0\n      },\n      'string':/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation:/^[\\[\\]!:]|[<>]/\n    },\n    alias:\"url\"\n  },\n  bold:{\n    pattern:/(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind:!0,\n    inside:{\n      punctuation:/^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic:{\n    pattern:/(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind:!0,\n    inside:{\n      punctuation:/^[*_]|[*_]$/\n    }\n  },\n  url:{\n    pattern:/!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside:{\n      variable:{\n        pattern:/(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind:!0\n      },\n      'string':{\n        pattern:/\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\nPrism.languages.markdown.bold.inside.url=Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.italic.inside.url=Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.bold.inside.italic=Prism.util.clone(Prism.languages.markdown.italic);\nPrism.languages.markdown.italic.inside.bold=Prism.util.clone(Prism.languages.markdown.bold);\n\n\nconst serialize = nodes => nodes.map(n => Node.string(n)).join('\\n');\nconst initialValue: Descendant[] = [{ type: 'paragraph', children: [{ text: '' } ] }];\nfunction Editor(props) {\n  const [value, setValue] = useState<Descendant[]>(initialValue)\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n  const decorate = useCallback(([node, path]) => {\n    if (!Text.isText(node)) return [];\n    const ranges = [];\n    // const tokens = Prism.tokenize(node.text, Prism.languages.markdown);\n    const Marked_Tokens = Marked.lexer(node.text);\n    // console.log(tokens);\n    // console.log(Marked_Tokens);\n    // console.log('==========');\n    // const getLength = token => {\n    //   if (typeof token === 'string') return token.length;\n    //   else if (typeof token.content === 'string') return token.content.length;\n    //   else return token.content.reduce((l, t) => l + getLength(t), 0);\n    // }\n    // let start = 0;\n    // for (const token of tokens) {\n    //   console.log(token);\n    //   const end = start + getLength(token);\n    //   if (typeof token !== 'string') {\n    //     ranges.push({\n    //       [token.type]: true,\n    //       anchor: { path, offset: start },\n    //       focus: { path, offset: end },\n    //     });\n    //   }\n    //   start = end;\n    // }\n    // console.log(ranges);\n    // return ranges;\n  }, []);\n  return (\n    <section className={styles.Container}>\n      <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n        <Editable\n          decorate={decorate}\n          renderLeaf={renderLeaf}\n          placeholder=\"Send A Message\"\n          onKeyDown={e => {\n            if (e.keyCode == 13 && !e.shiftKey) {\n              e.preventDefault();\n              if (serialize(value).trim().length == 0) return;\n              Send(props.User, props.SID, serialize(value));\n              editor.selection = {\n                anchor: { path: [0, 0], offset: 0 },\n                focus: { path: [0, 0], offset: 0 },\n              }\n              setValue(initialValue);\n            }\n          }}\n        />\n      </Slate>\n    </section>\n  )\n}\nconst Leaf = ({ attributes, children, leaf }) => {\n  let Classes = [];\n  if (leaf.bold) Classes.push(styles.Bold);\n  if (leaf.italic) Classes.push(styles.Italic);\n  if (leaf.underlined) Classes.push(styles.Underline);\n  if (leaf.title) Classes.push(styles.Title);\n  if (leaf.list) Classes.push(styles.List);\n  if (leaf.hr) Classes.push(styles.Hr);\n  if (leaf.blockquote) Classes.push(styles.Blockquote);\n  if (leaf.code) Classes.push(styles.Inline_Code);\n  return (<span {...attributes} className={Classes.join(' ')}>{children}</span>);\n}\nexport default Editor;"]},"metadata":{},"sourceType":"module"}