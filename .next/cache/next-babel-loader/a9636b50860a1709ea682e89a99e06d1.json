{"ast":null,"code":"var _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Servers.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore } from './../Scripts/Firebase'; //Modules \n\nimport Server from './Server';\n\nclass Servers extends React.Component {\n  constructor(props) {\n    super(props); // create the snapshow listener\n\n    _defineProperty(this, \"state\", void 0);\n\n    firestore.collection('Users').doc(this.props.User.uid).onSnapshot(async User => {\n      if (User.exists) {\n        let data = User.data();\n        let Saved_Active = localStorage.getItem('Server');\n        let Active = Saved_Active && Object.keys(data.Servers).includes(Saved_Active) ? Saved_Active : Object.keys(data.Servers)[0];\n        let Servers = new Map(Object.entries(data.Servers));\n        this.setState({\n          Active,\n          Servers\n        });\n        this.props.Server_Select(Active, Servers.get(Active));\n      }\n    }, () => {});\n  }\n\n  Change_Server(evt, child) {\n    this.setState({\n      Active: child\n    });\n    this.props.Server_Select(child, this.state.Servers.get(child));\n  }\n\n  render() {\n    return __jsx(\"section\", {\n      className: styles.Container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, (() => {\n      let Comps = [];\n\n      for (let [key, value] of this.state.Servers) {\n        Comps.push(__jsx(Server, {\n          key: key,\n          id: key,\n          Name: value,\n          Active: this.state.Active,\n          customClickEvent: this.Change_Server.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }));\n      }\n\n      return Comps;\n    })(), __jsx(Server, {\n      id: this.props.User.uid,\n      Name: this.props.User.displayName,\n      Active: this.state.Active,\n      customClickEvent: this.Change_Server.bind(this),\n      Self: this.props.User.photoURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Servers;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Servers.tsx"],"names":["React","styles","firestore","Server","Servers","Component","constructor","props","collection","doc","User","uid","onSnapshot","exists","data","Saved_Active","localStorage","getItem","Active","Object","keys","includes","Map","entries","setState","Server_Select","get","Change_Server","evt","child","state","render","Container","Comps","key","value","push","bind","displayName","photoURL"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore } from './../Scripts/Firebase';\n//Modules \nimport Server from './Server';\ntype MyProps = { Server_Select: Function, User: any };\ntype MyState = { Active: string, Servers: Map<string, string> };\nclass Servers extends React.Component<MyProps, MyState> {\n  public state: MyState;\n  constructor(props) {\n    super(props);\n    \n    // create the snapshow listener\n     firestore.collection('Users').doc(this.props.User.uid).onSnapshot(async User => {\n        if (User.exists) {\n          let data = User.data();\n          let Saved_Active = localStorage.getItem('Server');\n          let Active: string = (Saved_Active && Object.keys(data.Servers).includes(Saved_Active)) ? Saved_Active : Object.keys(data.Servers)[0];\n          let Servers: Map<string, string> = new Map(Object.entries(data.Servers));\n          this.setState({ Active, Servers });\n          this.props.Server_Select(Active, Servers.get(Active))\n        }\n      }, () => {}\n    )\n  }\n  Change_Server(evt, child) {\n    this.setState({Active: child});\n    this.props.Server_Select(\n       child,\n      this.state.Servers.get(child)\n    )\n  }\n  render() {\n    return (\n      <section className={styles.Container}>\n        {\n          (() => {\n            let Comps = [];\n            for (let [key, value] of this.state.Servers) {\n              Comps.push(\n                <Server \n                  key={key}\n                  id={key}\n                  Name={value}\n                  Active={this.state.Active}\n                  customClickEvent={this.Change_Server.bind(this)}\n                />\n              );\n            }\n            return Comps;\n          })()\n        }\n        <Server id={this.props.User.uid} Name={this.props.User.displayName} Active={this.state.Active} customClickEvent={this.Change_Server.bind(this)} Self={this.props.User.photoURL}/>\n      </section>\n    );\n  }\n}\n\nexport default Servers;"]},"metadata":{},"sourceType":"module"}