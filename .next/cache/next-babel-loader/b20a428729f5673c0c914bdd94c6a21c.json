{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Servers.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore } from './../Scripts/Firebase'; //Modules \n\nimport Server from './Server';\n\nvar Servers = /*#__PURE__*/function (_React$Component) {\n  _inherits(Servers, _React$Component);\n\n  function Servers(props) {\n    var _this;\n\n    _classCallCheck(this, Servers);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Servers).call(this, props)); // create the snapshow listener\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", void 0);\n\n    firestore.collection('Users').doc(_this.props.User.uid).onSnapshot(function _callee(User) {\n      var data, Server_Info, SID, Data;\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!User.exists) {\n                _context2.next = 5;\n                break;\n              }\n\n              data = User.data();\n              console.log(data);\n              _context2.next = 11;\n              break;\n\n            case 5:\n              // Make the user a profile with the basic server\n              Server_Info = function Server_Info(Server_ID) {\n                var Document, doc;\n                return _regeneratorRuntime.async(function Server_Info$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        Document = firestore.collection('Servers').doc(Server_ID);\n                        _context.next = 3;\n                        return _regeneratorRuntime.awrap(Document.get()[\"catch\"](function () {\n                          return 'Banned';\n                        }));\n\n                      case 3:\n                        doc = _context.sent;\n                        return _context.abrupt(\"return\", {\n                          Name: doc && doc != 'Banned' && doc.exists ? doc.data().Name : null,\n                          Banned: doc == 'Banned' ? true : false\n                        });\n\n                      case 5:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                });\n              };\n\n              SID = 'UUw40MdRDcUxdEy00Zuo';\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(Server_Info(SID, db));\n\n            case 9:\n              Data = _context2.sent;\n\n              if (!Data.Banned) {\n                db.collection('Users').doc(user.uid).set({\n                  Servers: _defineProperty({}, SID, Data.Name)\n                })[\"catch\"](function (err) {\n                  console.log(err);\n                });\n              }\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }, function () {}); // state\n\n    _this.state = {\n      Active: '123',\n      Servers: new _Map([['123', 'Testing'], ['UUw40MdRDcUxdEy00Zuo', 'Tes']])\n    };\n\n    _this.props.Server_Select(_this.state.Active, _this.state.Servers.get(_this.state.Active));\n\n    return _this;\n  }\n\n  _createClass(Servers, [{\n    key: \"Change_Server\",\n    value: function Change_Server(evt, child) {\n      this.setState({\n        Active: child\n      });\n      this.props.Server_Select(child, this.state.Servers.get(child));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"section\", {\n        className: styles.Container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, function () {\n        var Comps = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _getIterator(_this2.state.Servers), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                value = _step$value[1];\n\n            Comps.push(__jsx(Server, {\n              key: key,\n              id: key,\n              Name: value,\n              Active: _this2.state.Active,\n              customClickEvent: _this2.Change_Server.bind(_this2),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 66\n              },\n              __self: this\n            }));\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return Comps;\n      }(), __jsx(Server, {\n        id: this.props.User.uid,\n        Name: this.props.User.displayName,\n        Active: this.state.Active,\n        customClickEvent: this.Change_Server.bind(this),\n        Self: this.props.User.photoURL,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Servers;\n}(React.Component);\n\nexport default Servers;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Servers.tsx"],"names":["React","styles","firestore","Server","Servers","props","collection","doc","User","uid","onSnapshot","exists","data","console","log","Server_Info","Server_ID","Document","get","Name","Banned","SID","db","Data","user","set","err","state","Active","Server_Select","evt","child","setState","Container","Comps","key","value","push","Change_Server","bind","displayName","photoURL","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore } from './../Scripts/Firebase';\n//Modules \nimport Server from './Server';\ntype MyProps = { Server_Select: Function, User: any };\ntype MyState = { Active: string, Servers: Map<string, string> };\nclass Servers extends React.Component<MyProps, MyState> {\n  public state: MyState;\n  constructor(props) {\n    super(props);\n    // create the snapshow listener\n     firestore.collection('Users').doc(this.props.User.uid).onSnapshot(async User => {\n        if (User.exists) {\n          let data = User.data();\n          console.log(data);\n        } \n        else {\n          // Make the user a profile with the basic server\n          let Server_Info = async (Server_ID)  => {\n            let Document = firestore.collection('Servers').doc(Server_ID);\n            let doc = await Document.get().catch(() => 'Banned');\n            return {\n              Name: doc && doc != 'Banned' && doc.exists ? doc.data().Name : null,\n              Banned: doc == 'Banned' ? true : false\n            }\n          }\n          let SID = 'UUw40MdRDcUxdEy00Zuo';\n          let Data = await Server_Info(SID, db);\n          if (!Data.Banned) {\n            db.collection('Users').doc(user.uid).set({\n              Servers: { [SID]: Data.Name }\n            }).catch(err => { console.log(err)});\n          }\n        }\n      }, () => {}\n    )\n    // state\n    this.state = {\n      Active: '123',\n      Servers: new Map([\n        [ '123', 'Testing' ],\n        [ 'UUw40MdRDcUxdEy00Zuo', 'Tes' ]\n      ])\n    };\n    this.props.Server_Select(\n      this.state.Active,\n      this.state.Servers.get(this.state.Active)\n    )\n  }\n  Change_Server(evt, child) {\n    this.setState({Active: child});\n    this.props.Server_Select(\n       child,\n      this.state.Servers.get(child)\n    )\n  }\n  render() {\n    return (\n      <section className={styles.Container}>\n        {\n          (() => {\n            let Comps = [];\n            for (let [key, value] of this.state.Servers) {\n              Comps.push(\n                <Server \n                  key={key}\n                  id={key}\n                  Name={value}\n                  Active={this.state.Active}\n                  customClickEvent={this.Change_Server.bind(this)}\n                />\n              );\n            }\n            return Comps;\n          })()\n        }\n        <Server id={this.props.User.uid} Name={this.props.User.displayName} Active={this.state.Active} customClickEvent={this.Change_Server.bind(this)} Self={this.props.User.photoURL}/>\n      </section>\n    );\n  }\n}\n\nexport default Servers;"]},"metadata":{},"sourceType":"module"}