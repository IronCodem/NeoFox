{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Messages.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styles from './../Style/Components/Messages.module.css';\nimport { firestore } from './../Scripts/Firebase';\nimport Message from './Message';\n\nvar Messages = /*#__PURE__*/function (_React$Component) {\n  _inherits(Messages, _React$Component);\n\n  function Messages(props) {\n    var _this;\n\n    _classCallCheck(this, Messages);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Messages).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      Messages: new _Map()\n    });\n\n    firestore.collection(\"Servers/\".concat(_this.props.SID, \"/Messages\")).limit(7).orderBy('Created', 'desc').onSnapshot(function _callee(Server) {\n      var Msgs;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              Msgs = _this.state.Messages;\n              Server.docChanges().forEach(function (Msg) {\n                if (Msg.type != 'removed') {\n                  var Data = Msg.doc.data();\n                  if (!Data.Created) return;\n                  Msgs.set(Msg.doc.id, {\n                    Time: Data.Created.toMillis(),\n                    Msg: __jsx(Message, {\n                      key: Msg.doc.id,\n                      Self: \"mHvcak8OjqZglBlENhQSLqBOgPB3\",\n                      Owner: Data.UID,\n                      Username: Data.Owner,\n                      Picture: Data.Picture,\n                      Content: Data.Content,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 27\n                      },\n                      __self: this\n                    })\n                  });\n                }\n              });\n\n              _this.setState({\n                Messages: new _Map(_toConsumableArray(Msgs.entries()).sort(function (a, b) {\n                  return b[1].Time - a[1].Time;\n                }))\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }, function () {});\n    return _this;\n  }\n\n  _createClass(Messages, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"section\", {\n        className: styles.Container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, _toConsumableArray(this.state.Messages).map(function (e) {\n        return e[1].Msg;\n      }));\n    }\n  }]);\n\n  return Messages;\n}(React.Component);\n\nexport default Messages;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Messages.tsx"],"names":["React","styles","firestore","Message","Messages","props","collection","SID","limit","orderBy","onSnapshot","Server","Msgs","state","docChanges","forEach","Msg","type","Data","doc","data","Created","set","id","Time","toMillis","UID","Owner","Picture","Content","setState","entries","sort","a","b","Container","map","e","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,2CAAnB;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,OAAOC,OAAP,MAAoB,WAApB;;IAKMC,Q;;;AAEJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;;AADiB,4DADK;AAAED,MAAAA,QAAQ,EAAE;AAAZ,KACL;;AAEjBF,IAAAA,SAAS,CAACI,UAAV,mBAAgC,MAAKD,KAAL,CAAWE,GAA3C,gBAA2DC,KAA3D,CAAiE,CAAjE,EAAoEC,OAApE,CAA4E,SAA5E,EAAuF,MAAvF,EACGC,UADH,CACc,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACNC,cAAAA,IADM,GAC6B,MAAKC,KAAL,CAAWT,QADxC;AAEVO,cAAAA,MAAM,CAACG,UAAP,GAAoBC,OAApB,CAA4B,UAACC,GAAD,EAAS;AACnC,oBAAIA,GAAG,CAACC,IAAJ,IAAY,SAAhB,EAA2B;AACzB,sBAAMC,IAAI,GAAGF,GAAG,CAACG,GAAJ,CAAQC,IAAR,EAAb;AACA,sBAAI,CAACF,IAAI,CAACG,OAAV,EAAmB;AAEnBT,kBAAAA,IAAI,CAACU,GAAL,CAASN,GAAG,CAACG,GAAJ,CAAQI,EAAjB,EAAqB;AACnBC,oBAAAA,IAAI,EAAEN,IAAI,CAACG,OAAL,CAAaI,QAAb,EADa;AAEnBT,oBAAAA,GAAG,EACD,MAAC,OAAD;AACE,sBAAA,GAAG,EAAEA,GAAG,CAACG,GAAJ,CAAQI,EADf;AAEE,sBAAA,IAAI,EAAC,8BAFP;AAGE,sBAAA,KAAK,EAAEL,IAAI,CAACQ,GAHd;AAIE,sBAAA,QAAQ,EAAER,IAAI,CAACS,KAJjB;AAKE,sBAAA,OAAO,EAAET,IAAI,CAACU,OALhB;AAME,sBAAA,OAAO,EAAEV,IAAI,CAACW,OANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHiB,mBAArB;AAaD;AACF,eAnBD;;AAoBA,oBAAKC,QAAL,CAAc;AACZ1B,gBAAAA,QAAQ,EAAE,SAAQ,mBAAIQ,IAAI,CAACmB,OAAL,EAAJ,EAAoBC,IAApB,CAAyB,UAACC,CAAD,EAAIC,CAAJ;AAAA,yBAAUA,CAAC,CAAC,CAAD,CAAD,CAAKV,IAAL,GAAUS,CAAC,CAAC,CAAD,CAAD,CAAKT,IAAzB;AAAA,iBAAzB,CAAR;AADE,eAAd;;AAtBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADd,EA0BK,YAAM,CAAE,CA1Bb;AAFiB;AA8BlB;;;;6BACQ;AACP,aACE;AAAS,QAAA,SAAS,EAAEvB,MAAM,CAACkC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,mBAAI,KAAKtB,KAAL,CAAWT,QAAf,EAAyBgC,GAAzB,CAA6B,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAAC,CAAD,CAAD,CAAKrB,GAAT;AAAA,OAA9B,CADH,CADF;AAKD;;;;EAvCoBhB,KAAK,CAACsC,S;;AAyC7B,eAAelC,QAAf","sourcesContent":["import React from 'react';\n\nimport styles from './../Style/Components/Messages.module.css';\n\nimport { firestore } from './../Scripts/Firebase';\n\nimport Message from './Message';\n\ntype MyProps = { SID: string, User: any };\ntype Message_Entry = { Time: number, Msg: Message };\ntype MyState = { Messages: Map<string, Message_Entry> };\nclass Messages extends React.Component<MyProps, MyState> {\n  public state: MyState = { Messages: new Map() }\n  constructor(props) {\n    super(props);\n    firestore.collection(`Servers/${this.props.SID}/Messages`).limit(7).orderBy('Created', 'desc')\n      .onSnapshot(async Server => {\n        let Msgs: Map<string, Message_Entry> = this.state.Messages;\n        Server.docChanges().forEach((Msg) => {\n          if (Msg.type != 'removed') {\n            const Data = Msg.doc.data();\n            if (!Data.Created) return;\n            \n            Msgs.set(Msg.doc.id, {\n              Time: Data.Created.toMillis(),\n              Msg: (\n                <Message \n                  key={Msg.doc.id}\n                  Self=\"mHvcak8OjqZglBlENhQSLqBOgPB3\"\n                  Owner={Data.UID}\n                  Username={Data.Owner}\n                  Picture={Data.Picture}\n                  Content={Data.Content}\n                />\n              )\n            })\n          }\n        });\n        this.setState({ \n          Messages: new Map([...Msgs.entries()].sort((a, b) => b[1].Time-a[1].Time))\n        });\n      }, () => {}\n    )\n  }\n  render() {\n    return (\n      <section className={styles.Container}>\n        {[...this.state.Messages].map(e => e[1].Msg)}\n      </section>\n    );\n  }\n}\nexport default Messages;"]},"metadata":{},"sourceType":"module"}