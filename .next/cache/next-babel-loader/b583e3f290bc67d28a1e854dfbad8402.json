{"ast":null,"code":"var _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Servers.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore } from './../Scripts/Firebase'; //Modules \n\nimport Server from './Server';\n\nclass Servers extends React.Component {\n  constructor(props) {\n    super(props); // create the snapshow listener\n\n    _defineProperty(this, \"state\", void 0);\n\n    firestore.collection('Users').doc(this.props.User.uid).onSnapshot(async User => {\n      if (User.exists) {\n        let data = User.data();\n        console.log;\n        $('.Guilds').replaceChildren();\n        Object.entries(User.data().Servers).map(D => {\n          let Contain = document.createElement('div'),\n              Out = document.createElement('picture'),\n              Inside = document.createElement('img');\n          Inside.width = '64';\n          Inside.height = '64';\n          Inside.src = `./media/Servers/${D[0].trim()}/Icon`;\n          Inside.alt = D[1];\n          Out.appendChild(Inside);\n          Contain.appendChild(Out);\n          Contain.setAttribute('onclick', 'Server_Switch(this.id)');\n          [Contain.id, Contain.title] = D;\n          $('.Guilds').appendChild(Contain);\n          Servers.set(D[0].trim(), D);\n        });\n        Server_Switch(localStorage.getItem('Server') && (Servers.has(localStorage.getItem('Server')) || localStorage.getItem('Server') == 'DM' && DMS.has(Storage)) ? localStorage.getItem('Server') : Servers.keys().next().value, localStorage.getItem('Channel')); // Saves the messaging device token to the datastore.\n\n        let saveMessagingDeviceToken = () => {\n          messaging.getToken().then(currentToken => {\n            if (currentToken) {\n              db.collection('Users').doc(auth.currentUser.uid).update({\n                Messaging: firebase.firestore.FieldValue.arrayUnion(currentToken)\n              }).catch(() => {});\n            } else {\n              requestNotificationsPermissions();\n            }\n          }).catch(() => {});\n        }; // Requests permissions to show notifications.\n\n\n        let requestNotificationsPermissions = () => {\n          messaging.requestPermission().then(() => saveMessagingDeviceToken()).catch(() => {});\n        };\n\n        saveMessagingDeviceToken();\n      } else {\n        // Make the user a profile with the basic server\n        let Server_Info = async Server_ID => {\n          let Document = db.collection('Servers').doc(Server_ID);\n          let doc = await Document.get().catch(() => 'Banned');\n          return {\n            Name: doc && doc != 'Banned' && doc.exists ? doc.data().Name : null,\n            Banned: doc == 'Banned' ? true : false\n          };\n        };\n\n        let SID = 'UUw40MdRDcUxdEy00Zuo';\n        let Data = await Server_Info(SID, db);\n\n        if (!Data.Banned) {\n          db.collection('Users').doc(user.uid).set({\n            Servers: {\n              [SID]: Data.Name\n            }\n          }).catch(err => {\n            console.log(err);\n          });\n        }\n      }\n    }, () => {}); // state\n\n    this.state = {\n      Active: '123',\n      Servers: new Map([['123', 'Testing'], ['UUw40MdRDcUxdEy00Zuo', 'Tes']])\n    };\n    this.props.Server_Select(this.state.Active, this.state.Servers.get(this.state.Active));\n  }\n\n  Change_Server(evt, child) {\n    this.setState({\n      Active: child\n    });\n    this.props.Server_Select(child, this.state.Servers.get(child));\n  }\n\n  render() {\n    return __jsx(\"section\", {\n      className: styles.Container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, (() => {\n      let Comps = [];\n\n      for (let [key, value] of this.state.Servers) {\n        Comps.push(__jsx(Server, {\n          key: key,\n          id: key,\n          Name: value,\n          Active: this.state.Active,\n          customClickEvent: this.Change_Server.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }));\n      }\n\n      return Comps;\n    })(), __jsx(Server, {\n      id: this.props.User.uid,\n      Name: this.props.User.displayName,\n      Active: this.state.Active,\n      customClickEvent: this.Change_Server.bind(this),\n      Self: this.props.User.photoURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Servers;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Servers.tsx"],"names":["React","styles","firestore","Server","Servers","Component","constructor","props","collection","doc","User","uid","onSnapshot","exists","data","console","log","$","replaceChildren","Object","entries","map","D","Contain","document","createElement","Out","Inside","width","height","src","trim","alt","appendChild","setAttribute","id","title","set","Server_Switch","localStorage","getItem","has","DMS","Storage","keys","next","value","saveMessagingDeviceToken","messaging","getToken","then","currentToken","db","auth","currentUser","update","Messaging","firebase","FieldValue","arrayUnion","catch","requestNotificationsPermissions","requestPermission","Server_Info","Server_ID","Document","get","Name","Banned","SID","Data","user","err","state","Active","Map","Server_Select","Change_Server","evt","child","setState","render","Container","Comps","key","push","bind","displayName","photoURL"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0CAAnB;AACA,SAASC,SAAT,QAA0B,uBAA1B,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAGA,MAAMC,OAAN,SAAsBJ,KAAK,CAACK,SAA5B,CAAwD;AAEtDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;;AAFiB;;AAGhBL,IAAAA,SAAS,CAACM,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkC,KAAKF,KAAL,CAAWG,IAAX,CAAgBC,GAAlD,EAAuDC,UAAvD,CAAkE,MAAMF,IAAN,IAAc;AAC7E,UAAIA,IAAI,CAACG,MAAT,EAAiB;AACf,YAAIC,IAAI,GAAGJ,IAAI,CAACI,IAAL,EAAX;AACAC,QAAAA,OAAO,CAACC,GAAR;AACAC,QAAAA,CAAC,CAAC,SAAD,CAAD,CAAaC,eAAb;AACAC,QAAAA,MAAM,CAACC,OAAP,CAAeV,IAAI,CAACI,IAAL,GAAYV,OAA3B,EAAoCiB,GAApC,CAAwCC,CAAC,IAAI;AAC3C,cAAIC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;AAAA,cACIC,GAAG,GAAGF,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CADV;AAAA,cAEIE,MAAM,GAAGH,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAFb;AAGAE,UAAAA,MAAM,CAACC,KAAP,GAAe,IAAf;AACAD,UAAAA,MAAM,CAACE,MAAP,GAAgB,IAAhB;AACAF,UAAAA,MAAM,CAACG,GAAP,GAAc,mBAAkBR,CAAC,CAAC,CAAD,CAAD,CAAKS,IAAL,EAAY,OAA5C;AACAJ,UAAAA,MAAM,CAACK,GAAP,GAAaV,CAAC,CAAC,CAAD,CAAd;AACAI,UAAAA,GAAG,CAACO,WAAJ,CAAgBN,MAAhB;AACAJ,UAAAA,OAAO,CAACU,WAAR,CAAoBP,GAApB;AACAH,UAAAA,OAAO,CAACW,YAAR,CAAqB,SAArB,EAAgC,wBAAhC;AACA,WAACX,OAAO,CAACY,EAAT,EAAaZ,OAAO,CAACa,KAArB,IAA8Bd,CAA9B;AACAL,UAAAA,CAAC,CAAC,SAAD,CAAD,CAAagB,WAAb,CAAyBV,OAAzB;AACAnB,UAAAA,OAAO,CAACiC,GAAR,CAAYf,CAAC,CAAC,CAAD,CAAD,CAAKS,IAAL,EAAZ,EAAyBT,CAAzB;AACD,SAdD;AAeAgB,QAAAA,aAAa,CACXC,YAAY,CAACC,OAAb,CAAqB,QAArB,MACEpC,OAAO,CAACqC,GAAR,CAAYF,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAZ,KACED,YAAY,CAACC,OAAb,CAAqB,QAArB,KAAkC,IAAlC,IAA0CE,GAAG,CAACD,GAAJ,CAAQE,OAAR,CAF9C,IAIIJ,YAAY,CAACC,OAAb,CAAqB,QAArB,CAJJ,GAIqCpC,OAAO,CAACwC,IAAR,GAAeC,IAAf,GAAsBC,KALhD,EAMXP,YAAY,CAACC,OAAb,CAAqB,SAArB,CANW,CAAb,CAnBe,CA2Bf;;AACA,YAAIO,wBAAwB,GAAG,MAAM;AACnCC,UAAAA,SAAS,CAACC,QAAV,GAAqBC,IAArB,CAA0BC,YAAY,IAAI;AACxC,gBAAIA,YAAJ,EAAkB;AAChBC,cAAAA,EAAE,CAAC5C,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2B4C,IAAI,CAACC,WAAL,CAAiB3C,GAA5C,EAAiD4C,MAAjD,CAAwD;AAAEC,gBAAAA,SAAS,EAAEC,QAAQ,CAACvD,SAAT,CAAmBwD,UAAnB,CAA8BC,UAA9B,CAAyCR,YAAzC;AAAb,eAAxD,EAA+HS,KAA/H,CAAqI,MAAM,CAAE,CAA7I;AACD,aAFD,MAEO;AACLC,cAAAA,+BAA+B;AAChC;AACF,WAND,EAMGD,KANH,CAMS,MAAM,CAAE,CANjB;AAOD,SARD,CA5Be,CAqCf;;;AACA,YAAIC,+BAA+B,GAAG,MAAM;AAC1Cb,UAAAA,SAAS,CAACc,iBAAV,GAA8BZ,IAA9B,CAAmC,MAAMH,wBAAwB,EAAjE,EAAqEa,KAArE,CAA2E,MAAM,CAAE,CAAnF;AACD,SAFD;;AAGAb,QAAAA,wBAAwB;AACzB,OA1CD,MA0CO;AACL;AACA,YAAIgB,WAAW,GAAG,MAAOC,SAAP,IAAsB;AACtC,cAAIC,QAAQ,GAAGb,EAAE,CAAC5C,UAAH,CAAc,SAAd,EAAyBC,GAAzB,CAA6BuD,SAA7B,CAAf;AACA,cAAIvD,GAAG,GAAG,MAAMwD,QAAQ,CAACC,GAAT,GAAeN,KAAf,CAAqB,MAAM,QAA3B,CAAhB;AACA,iBAAO;AACLO,YAAAA,IAAI,EAAE1D,GAAG,IAAIA,GAAG,IAAI,QAAd,IAA0BA,GAAG,CAACI,MAA9B,GAAuCJ,GAAG,CAACK,IAAJ,GAAWqD,IAAlD,GAAyD,IAD1D;AAELC,YAAAA,MAAM,EAAE3D,GAAG,IAAI,QAAP,GAAkB,IAAlB,GAAyB;AAF5B,WAAP;AAID,SAPD;;AAQA,YAAI4D,GAAG,GAAG,sBAAV;AACA,YAAIC,IAAI,GAAG,MAAMP,WAAW,CAACM,GAAD,EAAMjB,EAAN,CAA5B;;AACA,YAAI,CAACkB,IAAI,CAACF,MAAV,EAAkB;AAChBhB,UAAAA,EAAE,CAAC5C,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2B8D,IAAI,CAAC5D,GAAhC,EAAqC0B,GAArC,CAAyC;AACvCjC,YAAAA,OAAO,EAAE;AAAE,eAACiE,GAAD,GAAOC,IAAI,CAACH;AAAd;AAD8B,WAAzC,EAEGP,KAFH,CAESY,GAAG,IAAI;AAAEzD,YAAAA,OAAO,CAACC,GAAR,CAAYwD,GAAZ;AAAiB,WAFnC;AAGD;AACF;AACF,KA7DF,EA6DI,MAAM,CAAE,CA7DZ,EAHgB,CAkEjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXtE,MAAAA,OAAO,EAAE,IAAIuE,GAAJ,CAAQ,CACf,CAAE,KAAF,EAAS,SAAT,CADe,EAEf,CAAE,sBAAF,EAA0B,KAA1B,CAFe,CAAR;AAFE,KAAb;AAOA,SAAKpE,KAAL,CAAWqE,aAAX,CACE,KAAKH,KAAL,CAAWC,MADb,EAEE,KAAKD,KAAL,CAAWrE,OAAX,CAAmB8D,GAAnB,CAAuB,KAAKO,KAAL,CAAWC,MAAlC,CAFF;AAID;;AACDG,EAAAA,aAAa,CAACC,GAAD,EAAMC,KAAN,EAAa;AACxB,SAAKC,QAAL,CAAc;AAACN,MAAAA,MAAM,EAAEK;AAAT,KAAd;AACA,SAAKxE,KAAL,CAAWqE,aAAX,CACGG,KADH,EAEE,KAAKN,KAAL,CAAWrE,OAAX,CAAmB8D,GAAnB,CAAuBa,KAAvB,CAFF;AAID;;AACDE,EAAAA,MAAM,GAAG;AACP,WACE;AAAS,MAAA,SAAS,EAAEhF,MAAM,CAACiF,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,CAAC,MAAM;AACL,UAAIC,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAI,CAACC,GAAD,EAAMtC,KAAN,CAAT,IAAyB,KAAK2B,KAAL,CAAWrE,OAApC,EAA6C;AAC3C+E,QAAAA,KAAK,CAACE,IAAN,CACE,MAAC,MAAD;AACE,UAAA,GAAG,EAAED,GADP;AAEE,UAAA,EAAE,EAAEA,GAFN;AAGE,UAAA,IAAI,EAAEtC,KAHR;AAIE,UAAA,MAAM,EAAE,KAAK2B,KAAL,CAAWC,MAJrB;AAKE,UAAA,gBAAgB,EAAE,KAAKG,aAAL,CAAmBS,IAAnB,CAAwB,IAAxB,CALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;AACD,aAAOH,KAAP;AACD,KAdD,GAFJ,EAkBE,MAAC,MAAD;AAAQ,MAAA,EAAE,EAAE,KAAK5E,KAAL,CAAWG,IAAX,CAAgBC,GAA5B;AAAiC,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWG,IAAX,CAAgB6E,WAAvD;AAAoE,MAAA,MAAM,EAAE,KAAKd,KAAL,CAAWC,MAAvF;AAA+F,MAAA,gBAAgB,EAAE,KAAKG,aAAL,CAAmBS,IAAnB,CAAwB,IAAxB,CAAjH;AAAgJ,MAAA,IAAI,EAAE,KAAK/E,KAAL,CAAWG,IAAX,CAAgB8E,QAAtK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBF,CADF;AAsBD;;AA/GqD;;AAkHxD,eAAepF,OAAf","sourcesContent":["import React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore } from './../Scripts/Firebase';\n//Modules \nimport Server from './Server';\ntype MyProps = { Server_Select: Function, User: any };\ntype MyState = { Active: string, Servers: Map<string, string> };\nclass Servers extends React.Component<MyProps, MyState> {\n  public state: MyState;\n  constructor(props) {\n    super(props);\n    // create the snapshow listener\n     firestore.collection('Users').doc(this.props.User.uid).onSnapshot(async User => {\n        if (User.exists) {\n          let data = User.data();\n          console.log\n          $('.Guilds').replaceChildren();\n          Object.entries(User.data().Servers).map(D => {\n            let Contain = document.createElement('div'), \n                Out = document.createElement('picture'), \n                Inside = document.createElement('img');\n            Inside.width = '64';\n            Inside.height = '64';\n            Inside.src = `./media/Servers/${D[0].trim()}/Icon`;\n            Inside.alt = D[1];\n            Out.appendChild(Inside);\n            Contain.appendChild(Out);\n            Contain.setAttribute('onclick', 'Server_Switch(this.id)');\n            [Contain.id, Contain.title] = D;\n            $('.Guilds').appendChild(Contain);\n            Servers.set(D[0].trim(), D);\n          });\n          Server_Switch(\n            localStorage.getItem('Server') && (\n              Servers.has(localStorage.getItem('Server')) || (\n                localStorage.getItem('Server') == 'DM' && DMS.has(Storage)\n              )\n            ) ? localStorage.getItem('Server') : Servers.keys().next().value, \n            localStorage.getItem('Channel')\n          );\n          // Saves the messaging device token to the datastore.\n          let saveMessagingDeviceToken = () => {\n            messaging.getToken().then(currentToken => {\n              if (currentToken) {\n                db.collection('Users').doc(auth.currentUser.uid).update({ Messaging: firebase.firestore.FieldValue.arrayUnion(currentToken) }).catch(() => {});\n              } else {\n                requestNotificationsPermissions();\n              }\n            }).catch(() => {});\n          }\n          // Requests permissions to show notifications.\n          let requestNotificationsPermissions = () => {\n            messaging.requestPermission().then(() => saveMessagingDeviceToken()).catch(() => {});\n          }\n          saveMessagingDeviceToken();\n        } else {\n          // Make the user a profile with the basic server\n          let Server_Info = async (Server_ID)  => {\n            let Document = db.collection('Servers').doc(Server_ID);\n            let doc = await Document.get().catch(() => 'Banned');\n            return {\n              Name: doc && doc != 'Banned' && doc.exists ? doc.data().Name : null,\n              Banned: doc == 'Banned' ? true : false\n            }\n          }\n          let SID = 'UUw40MdRDcUxdEy00Zuo';\n          let Data = await Server_Info(SID, db);\n          if (!Data.Banned) {\n            db.collection('Users').doc(user.uid).set({\n              Servers: { [SID]: Data.Name }\n            }).catch(err => { console.log(err)});\n          }\n        }\n      }, () => {}\n    )\n    // state\n    this.state = {\n      Active: '123',\n      Servers: new Map([\n        [ '123', 'Testing' ],\n        [ 'UUw40MdRDcUxdEy00Zuo', 'Tes' ]\n      ])\n    };\n    this.props.Server_Select(\n      this.state.Active,\n      this.state.Servers.get(this.state.Active)\n    )\n  }\n  Change_Server(evt, child) {\n    this.setState({Active: child});\n    this.props.Server_Select(\n       child,\n      this.state.Servers.get(child)\n    )\n  }\n  render() {\n    return (\n      <section className={styles.Container}>\n        {\n          (() => {\n            let Comps = [];\n            for (let [key, value] of this.state.Servers) {\n              Comps.push(\n                <Server \n                  key={key}\n                  id={key}\n                  Name={value}\n                  Active={this.state.Active}\n                  customClickEvent={this.Change_Server.bind(this)}\n                />\n              );\n            }\n            return Comps;\n          })()\n        }\n        <Server id={this.props.User.uid} Name={this.props.User.displayName} Active={this.state.Active} customClickEvent={this.Change_Server.bind(this)} Self={this.props.User.photoURL}/>\n      </section>\n    );\n  }\n}\n\nexport default Servers;"]},"metadata":{},"sourceType":"module"}