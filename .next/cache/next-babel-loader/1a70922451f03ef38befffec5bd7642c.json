{"ast":null,"code":"var _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Servers.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport styles from './../Style/Components/Servers.module.css'; //Modules \n\nimport Server from './Server';\n\nclass Servers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", void 0);\n\n    this.state = {\n      Active: '123',\n      Servers: new Map([['123', 'Testing'], ['UUw40MdRDcUxdEy00Zuo', 'Tes']])\n    }; //add event listeners for users servers\n  }\n\n  Change_Server(evt, child) {\n    this.setState({\n      Active: child\n    });\n    this.props.Server_Select(child, this.state.Servers.get(child));\n  }\n\n  render() {\n    return __jsx(\"section\", {\n      className: styles.Container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, (() => {\n      let Comps = [];\n\n      for (let [key, value] of this.state.Servers) {\n        Comps.push(__jsx(Server, {\n          key: key,\n          id: key,\n          Name: value,\n          Active: this.state.Active,\n          customClickEvent: this.Change_Server.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }));\n      }\n\n      return Comps;\n    })());\n  }\n\n}\n\nexport default Servers;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Servers.tsx"],"names":["React","styles","Server","Servers","Component","constructor","props","state","Active","Map","Change_Server","evt","child","setState","Server_Select","get","render","Container","Comps","key","value","push","bind"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0CAAnB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAGA,MAAMC,OAAN,SAAsBH,KAAK,CAACI,SAA5B,CAAwD;AAEtDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB;;AAEjB,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXL,MAAAA,OAAO,EAAE,IAAIM,GAAJ,CAAQ,CACf,CAAE,KAAF,EAAS,SAAT,CADe,EAEf,CAAE,sBAAF,EAA0B,KAA1B,CAFe,CAAR;AAFE,KAAb,CAFiB,CASjB;AACD;;AACDC,EAAAA,aAAa,CAACC,GAAD,EAAMC,KAAN,EAAa;AACxB,SAAKC,QAAL,CAAc;AAACL,MAAAA,MAAM,EAAEI;AAAT,KAAd;AACA,SAAKN,KAAL,CAAWQ,aAAX,CACGF,KADH,EAEE,KAAKL,KAAL,CAAWJ,OAAX,CAAmBY,GAAnB,CAAuBH,KAAvB,CAFF;AAID;;AACDI,EAAAA,MAAM,GAAG;AACP,WACE;AAAS,MAAA,SAAS,EAAEf,MAAM,CAACgB,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,CAAC,MAAM;AACL,UAAIC,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyB,KAAKb,KAAL,CAAWJ,OAApC,EAA6C;AAC3Ce,QAAAA,KAAK,CAACG,IAAN,CACE,MAAC,MAAD;AACE,UAAA,GAAG,EAAEF,GADP;AAEE,UAAA,EAAE,EAAEA,GAFN;AAGE,UAAA,IAAI,EAAEC,KAHR;AAIE,UAAA,MAAM,EAAE,KAAKb,KAAL,CAAWC,MAJrB;AAKE,UAAA,gBAAgB,EAAE,KAAKE,aAAL,CAAmBY,IAAnB,CAAwB,IAAxB,CALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;AACD,aAAOJ,KAAP;AACD,KAdD,GAFJ,CADF;AAqBD;;AA1CqD;;AA6CxD,eAAef,OAAf","sourcesContent":["import React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\n//Modules \nimport Server from './Server';\ntype MyProps = { Server_Select: Function };\ntype MyState = { Active: string, Servers: Map<string, string> };\nclass Servers extends React.Component<MyProps, MyState> {\n  public state: MyState;\n  constructor(props) {\n    super(props);\n    this.state = {\n      Active: '123',\n      Servers: new Map([\n        [ '123', 'Testing' ],\n        [ 'UUw40MdRDcUxdEy00Zuo', 'Tes' ]\n      ]) \n    };\n    //add event listeners for users servers\n  }\n  Change_Server(evt, child) {\n    this.setState({Active: child});\n    this.props.Server_Select(\n       child,\n      this.state.Servers.get(child)\n    )\n  }\n  render() {\n    return (\n      <section className={styles.Container}>\n        {\n          (() => {\n            let Comps = [];\n            for (let [key, value] of this.state.Servers) {\n              Comps.push(\n                <Server \n                  key={key}\n                  id={key}\n                  Name={value}\n                  Active={this.state.Active}\n                  customClickEvent={this.Change_Server.bind(this)}\n                />\n              );\n            }\n            return Comps;\n          })()\n        }\n      </section>\n    );\n  }\n}\n\nexport default Servers;"]},"metadata":{},"sourceType":"module"}