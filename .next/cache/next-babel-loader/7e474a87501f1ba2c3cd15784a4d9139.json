{"ast":null,"code":"var _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Editor.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Prism from 'prismjs';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport styles from './../Style/Components/Editor.module.css';\nimport * as Hello from './../Scripts/Chatter';\nconsole.log(Hello);\nPrism.languages.markdown = Prism.languages.extend(\"markup\", {});\nPrism.languages.insertBefore(\"markdown\", \"prolog\", {\n  blockquote: {\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: \"punctuation\"\n  },\n  code: [{\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: \"keyword\"\n  }, {\n    pattern: /`\\`.+?`\\`|`[^`\\n]+`/,\n    alias: \"keyword\"\n  }],\n  title: [{\n    pattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: \"important\",\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: !0,\n    alias: \"important\",\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  hr: {\n    pattern: /(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  list: {\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  \"url-reference\": {\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      variable: {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: !0\n      },\n      'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation: /^[\\[\\]!:]|[<>]/\n    },\n    alias: \"url\"\n  },\n  bold: {\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic: {\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^[*_]|[*_]$/\n    }\n  },\n  url: {\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      variable: {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: !0\n      },\n      'string': {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\nPrism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic);\nPrism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold);\nconst initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: ''\n  }]\n}];\n\nconst MarkdownPreviewExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const renderLeaf = useCallback(props => __jsx(Leaf, _extends({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), []);\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  const decorate = useCallback(([node, path]) => {\n    if (!Text.isText(node)) return [];\n    const ranges = [],\n          tokens = Prism.tokenize(node.text, Prism.languages.markdown);\n\n    const getLength = token => {\n      if (typeof token === 'string') return token.length;else if (typeof token.content === 'string') return token.content.length;else return token.content.reduce((l, t) => l + getLength(t), 0);\n    };\n\n    let start = 0;\n\n    for (const token of tokens) {\n      const end = start + getLength(token);\n\n      if (typeof token !== 'string') {\n        ranges.push({\n          [token.type]: true,\n          anchor: {\n            path,\n            offset: start\n          },\n          focus: {\n            path,\n            offset: end\n          }\n        });\n      }\n\n      start = end;\n    }\n\n    return ranges;\n  }, []);\n  return __jsx(\"section\", {\n    className: styles.Container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, __jsx(Editable, {\n    decorate: decorate,\n    renderLeaf: renderLeaf,\n    placeholder: \"Send A Message\",\n    onChange: ({\n      value\n    }) => {\n      console.log(Send);\n    },\n    onKeyDown: e => {\n      if (e.keyCode == 13 && !e.shiftKey) {\n        e.preventDefault();\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })));\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  let Classes = [];\n  if (leaf.bold) Classes.push(styles.Bold);\n  if (leaf.italic) Classes.push(styles.Italic);\n  if (leaf.underlined) Classes.push(styles.Underline);\n  if (leaf.title) Classes.push(styles.Title);\n  if (leaf.list) Classes.push(styles.List);\n  if (leaf.hr) Classes.push(styles.Hr);\n  if (leaf.blockquote) Classes.push(styles.Blockquote);\n  if (leaf.code) Classes.push(styles.Inline_Code);\n  return __jsx(\"span\", _extends({}, attributes, {\n    className: Classes.join(' '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), children);\n};\n\nexport default MarkdownPreviewExample;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Editor.tsx"],"names":["Prism","React","useState","useCallback","useMemo","Slate","Editable","withReact","Text","createEditor","withHistory","styles","Hello","console","log","languages","markdown","extend","insertBefore","blockquote","pattern","alias","code","title","inside","punctuation","lookbehind","hr","list","variable","bold","italic","url","util","clone","initialValue","type","children","text","MarkdownPreviewExample","value","setValue","renderLeaf","props","editor","decorate","node","path","isText","ranges","tokens","tokenize","getLength","token","length","content","reduce","l","t","start","end","push","anchor","offset","focus","Container","Send","e","keyCode","shiftKey","preventDefault","Leaf","attributes","leaf","Classes","Bold","Italic","underlined","Underline","Title","List","Hr","Blockquote","Inline_Code","join"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,aAA3C;AACA,SAASC,IAAT,EAAeC,YAAf,QAAwD,OAAxD;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAOC,MAAP,MAAmB,yCAAnB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,sBAAvB;AACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAZ,KAAK,CAACe,SAAN,CAAgBC,QAAhB,GAAyBhB,KAAK,CAACe,SAAN,CAAgBE,MAAhB,CAAuB,QAAvB,EAAgC,EAAhC,CAAzB;AACAjB,KAAK,CAACe,SAAN,CAAgBG,YAAhB,CAA6B,UAA7B,EAAwC,QAAxC,EAAkD;AAChDC,EAAAA,UAAU,EAAC;AACTC,IAAAA,OAAO,EAAC,iBADC;AAETC,IAAAA,KAAK,EAAC;AAFG,GADqC;AAKhDC,EAAAA,IAAI,EAAC,CACH;AACEF,IAAAA,OAAO,EAAC,iBADV;AAEEC,IAAAA,KAAK,EAAC;AAFR,GADG,EAKH;AACED,IAAAA,OAAO,EAAC,qBADV;AAEEC,IAAAA,KAAK,EAAE;AAFT,GALG,CAL2C;AAehDE,EAAAA,KAAK,EAAC,CACJ;AACEH,IAAAA,OAAO,EAAC,8BADV;AAEEC,IAAAA,KAAK,EAAC,WAFR;AAGEG,IAAAA,MAAM,EAAC;AACLC,MAAAA,WAAW,EAAC;AADP;AAHT,GADI,EAQJ;AACEL,IAAAA,OAAO,EAAC,aADV;AAEEM,IAAAA,UAAU,EAAC,CAAC,CAFd;AAGEL,IAAAA,KAAK,EAAC,WAHR;AAIEG,IAAAA,MAAM,EAAC;AACLC,MAAAA,WAAW,EAAC;AADP;AAJT,GARI,CAf0C;AAgChDE,EAAAA,EAAE,EAAC;AACDP,IAAAA,OAAO,EAAC,qCADP;AAEDM,IAAAA,UAAU,EAAC,CAAC,CAFX;AAGDL,IAAAA,KAAK,EAAC;AAHL,GAhC6C;AAqChDO,EAAAA,IAAI,EAAC;AACHR,IAAAA,OAAO,EAAC,kCADL;AAEHM,IAAAA,UAAU,EAAC,CAAC,CAFT;AAGHL,IAAAA,KAAK,EAAC;AAHH,GArC2C;AA0ChD,mBAAgB;AACdD,IAAAA,OAAO,EAAC,oHADM;AAEdI,IAAAA,MAAM,EAAC;AACLK,MAAAA,QAAQ,EAAC;AACPT,QAAAA,OAAO,EAAC,eADD;AAEPM,QAAAA,UAAU,EAAC,CAAC;AAFL,OADJ;AAKL,gBAAS,8DALJ;AAMLD,MAAAA,WAAW,EAAC;AANP,KAFO;AAUdJ,IAAAA,KAAK,EAAC;AAVQ,GA1CgC;AAsDhDS,EAAAA,IAAI,EAAC;AACHV,IAAAA,OAAO,EAAC,sDADL;AAEHM,IAAAA,UAAU,EAAC,CAAC,CAFT;AAGHF,IAAAA,MAAM,EAAC;AACLC,MAAAA,WAAW,EAAC;AADP;AAHJ,GAtD2C;AA6DhDM,EAAAA,MAAM,EAAC;AACLX,IAAAA,OAAO,EAAC,mDADH;AAELM,IAAAA,UAAU,EAAC,CAAC,CAFP;AAGLF,IAAAA,MAAM,EAAC;AACLC,MAAAA,WAAW,EAAC;AADP;AAHF,GA7DyC;AAoEhDO,EAAAA,GAAG,EAAC;AACFZ,IAAAA,OAAO,EAAC,wEADN;AAEFI,IAAAA,MAAM,EAAC;AACLK,MAAAA,QAAQ,EAAC;AACPT,QAAAA,OAAO,EAAC,qBADD;AAEPM,QAAAA,UAAU,EAAC,CAAC;AAFL,OADJ;AAKL,gBAAS;AACPN,QAAAA,OAAO,EAAC;AADD;AALJ;AAFL;AApE4C,CAAlD;AAiFApB,KAAK,CAACe,SAAN,CAAgBC,QAAhB,CAAyBc,IAAzB,CAA8BN,MAA9B,CAAqCQ,GAArC,GAAyChC,KAAK,CAACiC,IAAN,CAAWC,KAAX,CAAiBlC,KAAK,CAACe,SAAN,CAAgBC,QAAhB,CAAyBgB,GAA1C,CAAzC;AACAhC,KAAK,CAACe,SAAN,CAAgBC,QAAhB,CAAyBe,MAAzB,CAAgCP,MAAhC,CAAuCQ,GAAvC,GAA2ChC,KAAK,CAACiC,IAAN,CAAWC,KAAX,CAAiBlC,KAAK,CAACe,SAAN,CAAgBC,QAAhB,CAAyBgB,GAA1C,CAA3C;AACAhC,KAAK,CAACe,SAAN,CAAgBC,QAAhB,CAAyBc,IAAzB,CAA8BN,MAA9B,CAAqCO,MAArC,GAA4C/B,KAAK,CAACiC,IAAN,CAAWC,KAAX,CAAiBlC,KAAK,CAACe,SAAN,CAAgBC,QAAhB,CAAyBe,MAA1C,CAA5C;AACA/B,KAAK,CAACe,SAAN,CAAgBC,QAAhB,CAAyBe,MAAzB,CAAgCP,MAAhC,CAAuCM,IAAvC,GAA4C9B,KAAK,CAACiC,IAAN,CAAWC,KAAX,CAAiBlC,KAAK,CAACe,SAAN,CAAgBC,QAAhB,CAAyBc,IAA1C,CAA5C;AAEA,MAAMK,YAA0B,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,QAAQ,EAAE,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD;AAA/B,CAAD,CAAnC;;AACA,MAAMC,sBAAsB,GAAG,MAAM;AACnC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBvC,QAAQ,CAAeiC,YAAf,CAAlC;AACA,QAAMO,UAAU,GAAGvC,WAAW,CAACwC,KAAK,IAAI,MAAC,IAAD,eAAUA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV,EAA+B,EAA/B,CAA9B;AACA,QAAMC,MAAM,GAAGxC,OAAO,CAAC,MAAMM,WAAW,CAACH,SAAS,CAACE,YAAY,EAAb,CAAV,CAAlB,EAA+C,EAA/C,CAAtB;AACA,QAAMoC,QAAQ,GAAG1C,WAAW,CAAC,CAAC,CAAC2C,IAAD,EAAOC,IAAP,CAAD,KAAkB;AAC7C,QAAI,CAACvC,IAAI,CAACwC,MAAL,CAAYF,IAAZ,CAAL,EAAwB,OAAO,EAAP;AACxB,UAAMG,MAAM,GAAG,EAAf;AAAA,UAAmBC,MAAM,GAAGlD,KAAK,CAACmD,QAAN,CAAeL,IAAI,CAACR,IAApB,EAA0BtC,KAAK,CAACe,SAAN,CAAgBC,QAA1C,CAA5B;;AACA,UAAMoC,SAAS,GAAGC,KAAK,IAAI;AACzB,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAOA,KAAK,CAACC,MAAb,CAA/B,KACK,IAAI,OAAOD,KAAK,CAACE,OAAb,KAAyB,QAA7B,EAAuC,OAAOF,KAAK,CAACE,OAAN,CAAcD,MAArB,CAAvC,KACA,OAAOD,KAAK,CAACE,OAAN,CAAcC,MAAd,CAAqB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGL,SAAS,CAACM,CAAD,CAA5C,EAAiD,CAAjD,CAAP;AACN,KAJD;;AAKA,QAAIC,KAAK,GAAG,CAAZ;;AACA,SAAK,MAAMN,KAAX,IAAoBH,MAApB,EAA4B;AAC1B,YAAMU,GAAG,GAAGD,KAAK,GAAGP,SAAS,CAACC,KAAD,CAA7B;;AACA,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BJ,QAAAA,MAAM,CAACY,IAAP,CAAY;AACV,WAACR,KAAK,CAACjB,IAAP,GAAc,IADJ;AAEV0B,UAAAA,MAAM,EAAE;AAAEf,YAAAA,IAAF;AAAQgB,YAAAA,MAAM,EAAEJ;AAAhB,WAFE;AAGVK,UAAAA,KAAK,EAAE;AAAEjB,YAAAA,IAAF;AAAQgB,YAAAA,MAAM,EAAEH;AAAhB;AAHG,SAAZ;AAKD;;AACDD,MAAAA,KAAK,GAAGC,GAAR;AACD;;AACD,WAAOX,MAAP;AACD,GArB2B,EAqBzB,EArByB,CAA5B;AAsBA,SACE;AAAS,IAAA,SAAS,EAAEtC,MAAM,CAACsD,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,MAAM,EAAErB,MAAf;AAAuB,IAAA,KAAK,EAAEJ,KAA9B;AAAqC,IAAA,QAAQ,EAAEA,KAAK,IAAIC,QAAQ,CAACD,KAAD,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,QAAQ,EAAEK,QADZ;AAEE,IAAA,UAAU,EAAEH,UAFd;AAGE,IAAA,WAAW,EAAC,gBAHd;AAIE,IAAA,QAAQ,EAAE,CAAC;AAAEF,MAAAA;AAAF,KAAD,KAAe;AACvB3B,MAAAA,OAAO,CAACC,GAAR,CAAYoD,IAAZ;AACD,KANH;AAOE,IAAA,SAAS,EAAEC,CAAC,IAAI;AACd,UAAIA,CAAC,CAACC,OAAF,IAAa,EAAb,IAAmB,CAACD,CAAC,CAACE,QAA1B,EAAoC;AAClCF,QAAAA,CAAC,CAACG,cAAF;AACD;AACF,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAmBD,CA7CD;;AA8CA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcnC,EAAAA,QAAd;AAAwBoC,EAAAA;AAAxB,CAAD,KAAoC;AAC/C,MAAIC,OAAO,GAAG,EAAd;AACA,MAAID,IAAI,CAAC3C,IAAT,EAAe4C,OAAO,CAACb,IAAR,CAAalD,MAAM,CAACgE,IAApB;AACf,MAAIF,IAAI,CAAC1C,MAAT,EAAiB2C,OAAO,CAACb,IAAR,CAAalD,MAAM,CAACiE,MAApB;AACjB,MAAIH,IAAI,CAACI,UAAT,EAAqBH,OAAO,CAACb,IAAR,CAAalD,MAAM,CAACmE,SAApB;AACrB,MAAIL,IAAI,CAAClD,KAAT,EAAgBmD,OAAO,CAACb,IAAR,CAAalD,MAAM,CAACoE,KAApB;AAChB,MAAIN,IAAI,CAAC7C,IAAT,EAAe8C,OAAO,CAACb,IAAR,CAAalD,MAAM,CAACqE,IAApB;AACf,MAAIP,IAAI,CAAC9C,EAAT,EAAa+C,OAAO,CAACb,IAAR,CAAalD,MAAM,CAACsE,EAApB;AACb,MAAIR,IAAI,CAACtD,UAAT,EAAqBuD,OAAO,CAACb,IAAR,CAAalD,MAAM,CAACuE,UAApB;AACrB,MAAIT,IAAI,CAACnD,IAAT,EAAeoD,OAAO,CAACb,IAAR,CAAalD,MAAM,CAACwE,WAApB;AACf,SAAQ,2BAAUX,UAAV;AAAsB,IAAA,SAAS,EAAEE,OAAO,CAACU,IAAR,CAAa,GAAb,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqD/C,QAArD,CAAR;AACD,CAXD;;AAYA,eAAeE,sBAAf","sourcesContent":["import Prism from 'prismjs';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor, Element, Descendant } from 'slate';\nimport { withHistory } from 'slate-history';\n\nimport styles from './../Style/Components/Editor.module.css';\n\nimport * as Hello from './../Scripts/Chatter';\nconsole.log(Hello);\nPrism.languages.markdown=Prism.languages.extend(\"markup\",{});\nPrism.languages.insertBefore(\"markdown\",\"prolog\", {\n  blockquote:{\n    pattern:/^>(?:[\\t ]*>)*/m,\n    alias:\"punctuation\"\n  },\n  code:[\n    {\n      pattern:/^(?: {4}|\\t).+/m,\n      alias:\"keyword\"\n    },\n    {\n      pattern:/`\\`.+?`\\`|`[^`\\n]+`/,\n      alias: \"keyword\"\n    }\n  ],\n  title:[\n    {\n      pattern:/\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n      alias:\"important\",\n      inside:{\n        punctuation:/==+$|--+$/\n      }\n    },\n    {\n      pattern:/(^\\s*)#+.+/m,\n      lookbehind:!0,\n      alias:\"important\",\n      inside:{\n        punctuation:/^#+|#+$/\n      }\n    }\n  ],\n  hr:{\n    pattern:/(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind:!0,\n    alias:\"punctuation\"\n  },\n  list:{\n    pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind:!0,\n    alias:\"punctuation\"\n  },\n  \"url-reference\":{\n    pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside:{\n      variable:{\n        pattern:/^(!?\\[)[^\\]]+/,\n        lookbehind:!0\n      },\n      'string':/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation:/^[\\[\\]!:]|[<>]/\n    },\n    alias:\"url\"\n  },\n  bold:{\n    pattern:/(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind:!0,\n    inside:{\n      punctuation:/^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic:{\n    pattern:/(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind:!0,\n    inside:{\n      punctuation:/^[*_]|[*_]$/\n    }\n  },\n  url:{\n    pattern:/!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside:{\n      variable:{\n        pattern:/(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind:!0\n      },\n      'string':{\n        pattern:/\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\nPrism.languages.markdown.bold.inside.url=Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.italic.inside.url=Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.bold.inside.italic=Prism.util.clone(Prism.languages.markdown.italic);\nPrism.languages.markdown.italic.inside.bold=Prism.util.clone(Prism.languages.markdown.bold);\n\nconst initialValue: Descendant[] = [{ type: 'paragraph', children: [{ text: '' }, ] }];\nconst MarkdownPreviewExample = () => {\n  const [value, setValue] = useState<Descendant[]>(initialValue)\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n  const decorate = useCallback(([node, path]) => {\n    if (!Text.isText(node)) return [];\n    const ranges = [], tokens = Prism.tokenize(node.text, Prism.languages.markdown);\n    const getLength = token => {\n      if (typeof token === 'string') return token.length;\n      else if (typeof token.content === 'string') return token.content.length;\n      else return token.content.reduce((l, t) => l + getLength(t), 0);\n    }\n    let start = 0;\n    for (const token of tokens) {\n      const end = start + getLength(token);\n      if (typeof token !== 'string') {\n        ranges.push({\n          [token.type]: true,\n          anchor: { path, offset: start },\n          focus: { path, offset: end },\n        });\n      }\n      start = end;\n    }\n    return ranges;\n  }, [])\n  return (\n    <section className={styles.Container}>\n      <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n        <Editable\n          decorate={decorate}\n          renderLeaf={renderLeaf}\n          placeholder=\"Send A Message\"\n          onChange={({ value }) => {\n            console.log(Send);\n          }}\n          onKeyDown={e => {\n            if (e.keyCode == 13 && !e.shiftKey) {\n              e.preventDefault();\n            }\n          }}\n        />\n      </Slate>\n    </section>\n  )\n}\nconst Leaf = ({ attributes, children, leaf }) => {\n  let Classes = [];\n  if (leaf.bold) Classes.push(styles.Bold);\n  if (leaf.italic) Classes.push(styles.Italic);\n  if (leaf.underlined) Classes.push(styles.Underline);\n  if (leaf.title) Classes.push(styles.Title);\n  if (leaf.list) Classes.push(styles.List);\n  if (leaf.hr) Classes.push(styles.Hr);\n  if (leaf.blockquote) Classes.push(styles.Blockquote);\n  if (leaf.code) Classes.push(styles.Inline_Code);\n  return (<span {...attributes} className={Classes.join(' ')}>{children}</span>);\n}\nexport default MarkdownPreviewExample;"]},"metadata":{},"sourceType":"module"}