{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Servers.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore } from './../Scripts/Firebase'; //Modules \n\nimport Server from './Server';\n\nvar Servers = /*#__PURE__*/function (_React$Component) {\n  _inherits(Servers, _React$Component);\n\n  function Servers(props) {\n    var _this;\n\n    _classCallCheck(this, Servers);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Servers).call(this, props)); // create the snapshow listener\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", void 0);\n\n    firestore.collection('Users').doc(_this.props.User.uid).onSnapshot(function _callee(User) {\n      var data, Saved_Active, Active, _Servers;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (User.exists) {\n                data = User.data();\n                Saved_Active = localStorage.getItem('Server');\n                Active = Saved_Active && _Object$keys(data.Servers).includes(Saved_Active) ? Saved_Active : _Object$keys(data.Servers)[0];\n                _Servers = new _Map(_Object$entries(data.Servers));\n                console.log(data);\n                _this.state.Servers = {\n                  Active: Active,\n                  Servers: _Servers\n                };\n              } // give them the default one later\n              // else {\n              //   // Make the user a profile with the basic server\n              //   let Server_Info = async (Server_ID)  => {\n              //     let Document = firestore.collection('Servers').doc(Server_ID);\n              //     let doc = await Document.get().catch(() => 'Banned');\n              //     return {\n              //       Name: doc && doc != 'Banned' && doc.exists ? doc.data().Name : null,\n              //       Banned: doc == 'Banned' ? true : false\n              //     }\n              //   }\n              //   let SID = 'UUw40MdRDcUxdEy00Zuo';\n              //   let Data = await Server_Info(SID, db);\n              //   if (!Data.Banned) {\n              //     db.collection('Users').doc(user.uid).set({\n              //       Servers: { [SID]: Data.Name }\n              //     }).catch(err => { console.log(err)});\n              //   }\n              // }\n\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }, function () {}); // state\n    // this.state = {\n    //   Active: '123',\n    //   Servers: new Map([\n    //     [ '123', 'Testing' ],\n    //     [ 'UUw40MdRDcUxdEy00Zuo', 'Tes' ]\n    //   ])\n    // };\n\n    _this.props.Server_Select(_this.state.Active, _this.state.Servers.get(_this.state.Active));\n\n    return _this;\n  }\n\n  _createClass(Servers, [{\n    key: \"Change_Server\",\n    value: function Change_Server(evt, child) {\n      this.setState({\n        Active: child\n      });\n      this.props.Server_Select(child, this.state.Servers.get(child));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"section\", {\n        className: styles.Container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, function () {\n        var Comps = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _getIterator(_this2.state.Servers), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                value = _step$value[1];\n\n            Comps.push(__jsx(Server, {\n              key: key,\n              id: key,\n              Name: value,\n              Active: _this2.state.Active,\n              customClickEvent: _this2.Change_Server.bind(_this2),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 74\n              },\n              __self: this\n            }));\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return Comps;\n      }(), __jsx(Server, {\n        id: this.props.User.uid,\n        Name: this.props.User.displayName,\n        Active: this.state.Active,\n        customClickEvent: this.Change_Server.bind(this),\n        Self: this.props.User.photoURL,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Servers;\n}(React.Component);\n\nexport default Servers;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Servers.tsx"],"names":["React","styles","firestore","Server","Servers","props","collection","doc","User","uid","onSnapshot","exists","data","Saved_Active","localStorage","getItem","Active","includes","console","log","state","Server_Select","get","evt","child","setState","Container","Comps","key","value","push","Change_Server","bind","displayName","photoURL","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore } from './../Scripts/Firebase';\n//Modules \nimport Server from './Server';\ntype MyProps = { Server_Select: Function, User: any };\ntype MyState = { Active: string, Servers: Map<string, string> };\nclass Servers extends React.Component<MyProps, MyState> {\n  public state: MyState;\n  constructor(props) {\n    super(props);\n    // create the snapshow listener\n     firestore.collection('Users').doc(this.props.User.uid).onSnapshot(async User => {\n        if (User.exists) {\n          let data = User.data();\n          let Saved_Active = localStorage.getItem('Server');\n          let Active: string = (Saved_Active && Object.keys(data.Servers).includes(Saved_Active)) ? Saved_Active : Object.keys(data.Servers)[0];\n          let Servers:   Map<string, string> = new Map(Object.entries(data.Servers));\n          console.log(data);\n          this.state.Servers = {\n            Active,\n            Servers\n          }\n        } \n        // give them the default one later\n        // else {\n        //   // Make the user a profile with the basic server\n        //   let Server_Info = async (Server_ID)  => {\n        //     let Document = firestore.collection('Servers').doc(Server_ID);\n        //     let doc = await Document.get().catch(() => 'Banned');\n        //     return {\n        //       Name: doc && doc != 'Banned' && doc.exists ? doc.data().Name : null,\n        //       Banned: doc == 'Banned' ? true : false\n        //     }\n        //   }\n        //   let SID = 'UUw40MdRDcUxdEy00Zuo';\n        //   let Data = await Server_Info(SID, db);\n        //   if (!Data.Banned) {\n        //     db.collection('Users').doc(user.uid).set({\n        //       Servers: { [SID]: Data.Name }\n        //     }).catch(err => { console.log(err)});\n        //   }\n        // }\n      }, () => {}\n    )\n    // state\n    // this.state = {\n    //   Active: '123',\n    //   Servers: new Map([\n    //     [ '123', 'Testing' ],\n    //     [ 'UUw40MdRDcUxdEy00Zuo', 'Tes' ]\n    //   ])\n    // };\n    this.props.Server_Select(\n      this.state.Active,\n      this.state.Servers.get(this.state.Active)\n    )\n  }\n  Change_Server(evt, child) {\n    this.setState({Active: child});\n    this.props.Server_Select(\n       child,\n      this.state.Servers.get(child)\n    )\n  }\n  render() {\n    return (\n      <section className={styles.Container}>\n        {\n          (() => {\n            let Comps = [];\n            for (let [key, value] of this.state.Servers) {\n              Comps.push(\n                <Server \n                  key={key}\n                  id={key}\n                  Name={value}\n                  Active={this.state.Active}\n                  customClickEvent={this.Change_Server.bind(this)}\n                />\n              );\n            }\n            return Comps;\n          })()\n        }\n        <Server id={this.props.User.uid} Name={this.props.User.displayName} Active={this.state.Active} customClickEvent={this.Change_Server.bind(this)} Self={this.props.User.photoURL}/>\n      </section>\n    );\n  }\n}\n\nexport default Servers;"]},"metadata":{},"sourceType":"module"}