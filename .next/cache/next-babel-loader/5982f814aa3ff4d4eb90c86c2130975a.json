{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/runner/Chatter-React/pages/Components/Servers.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\n//Modules \nimport Server from './Server';\n\nvar Servers = /*#__PURE__*/function (_React$Component) {\n  _inherits(Servers, _React$Component);\n\n  function Servers(props) {\n    var _this;\n\n    _classCallCheck(this, Servers);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Servers).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      Active: '',\n      Servers: new _Map()\n    });\n\n    _this.state = {\n      Active: 'UUw40MdRDcUxdEy00Zuo',\n      Servers: new _Map([['UUw40MdRDcUxdEy00Zuo', 'test']])\n    }; // create the snapshow listener\n    //  firestore.collection('Users').doc(this.props.User.uid).onSnapshot(async User => {\n    //     if (User.exists) {\n    //       let data = User.data();\n    //       let Saved_Active = localStorage.getItem('Server');\n    //       let Active: string = (Saved_Active && Object.keys(data.Servers).includes(Saved_Active)) ? Saved_Active : Object.keys(data.Servers)[0];\n    //       let Servers: Map<string, string> = new Map(Object.entries(data.Servers));\n    //       this.setState({ Active, Servers });\n    //       this.props.Server_Select(Active, Servers.get(Active))\n    //     }\n    //     // deal with the user not having any servers\n    //   }, () => {}\n    // )\n\n    return _this;\n  }\n\n  _createClass(Servers, [{\n    key: \"Change_Server\",\n    value: function Change_Server(evt, child) {\n      this.setState({\n        Active: child\n      });\n      this.props.Server_Select(child, this.state.Servers.get(child));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"section\", {\n        className: styles.Container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, function () {\n        var Comps = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _getIterator(_this2.state.Servers), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                value = _step$value[1];\n\n            Comps.push(__jsx(Server, {\n              key: key,\n              id: key,\n              Name: value,\n              Active: _this2.state.Active,\n              customClickEvent: _this2.Change_Server.bind(_this2),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 41\n              },\n              __self: this\n            }));\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return Comps;\n      }(), __jsx(Server, {\n        id: this.props.User.uid,\n        Name: this.props.User.displayName,\n        Active: this.state.Active,\n        customClickEvent: this.Change_Server.bind(this),\n        Self: this.props.User.photoURL,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Servers;\n}(React.Component);\n\nexport default Servers;","map":{"version":3,"sources":["/home/runner/Chatter-React/pages/Components/Servers.tsx"],"names":["React","styles","Server","Servers","props","Active","state","evt","child","setState","Server_Select","get","Container","Comps","key","value","push","Change_Server","bind","User","uid","displayName","photoURL","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0CAAnB;AAEA;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAGMC,O;;;AAEJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;;AADiB,4DADK;AAAEC,MAAAA,MAAM,EAAE,EAAV;AAAcF,MAAAA,OAAO,EAAE;AAAvB,KACL;;AAEjB,UAAKG,KAAL,GAAc;AAAED,MAAAA,MAAM,EAAE,sBAAV;AAAkCF,MAAAA,OAAO,EAAE,SAAQ,CAC/D,CAAC,sBAAD,EAAyB,MAAzB,CAD+D,CAAR;AAA3C,KAAd,CAFiB,CAKjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjBiB;AAkBlB;;;;kCACaI,G,EAAKC,K,EAAO;AACxB,WAAKC,QAAL,CAAc;AAACJ,QAAAA,MAAM,EAAEG;AAAT,OAAd;AACA,WAAKJ,KAAL,CAAWM,aAAX,CAAyBF,KAAzB,EAA+B,KAAKF,KAAL,CAAWH,OAAX,CAAmBQ,GAAnB,CAAuBH,KAAvB,CAA/B;AACD;;;6BACQ;AAAA;;AACP,aACE;AAAS,QAAA,SAAS,EAAEP,MAAM,CAACW,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEK,YAAM;AACL,YAAIC,KAAK,GAAG,EAAZ;AADK;AAAA;AAAA;;AAAA;AAEL,4CAAyB,MAAI,CAACP,KAAL,CAAWH,OAApC,4GAA6C;AAAA;AAAA,gBAAnCW,GAAmC;AAAA,gBAA9BC,KAA8B;;AAC3CF,YAAAA,KAAK,CAACG,IAAN,CACE,MAAC,MAAD;AACE,cAAA,GAAG,EAAEF,GADP;AAEE,cAAA,EAAE,EAAEA,GAFN;AAGE,cAAA,IAAI,EAAEC,KAHR;AAIE,cAAA,MAAM,EAAE,MAAI,CAACT,KAAL,CAAWD,MAJrB;AAKE,cAAA,gBAAgB,EAAE,MAAI,CAACY,aAAL,CAAmBC,IAAnB,CAAwB,MAAxB,CALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AASD;AAZI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaL,eAAOL,KAAP;AACD,OAdD,EAFJ,EAkBE,MAAC,MAAD;AAAQ,QAAA,EAAE,EAAE,KAAKT,KAAL,CAAWe,IAAX,CAAgBC,GAA5B;AAAiC,QAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWe,IAAX,CAAgBE,WAAvD;AAAoE,QAAA,MAAM,EAAE,KAAKf,KAAL,CAAWD,MAAvF;AAA+F,QAAA,gBAAgB,EAAE,KAAKY,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAjH;AAAgJ,QAAA,IAAI,EAAE,KAAKd,KAAL,CAAWe,IAAX,CAAgBG,QAAtK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAlBF,CADF;AAsBD;;;;EAhDmBtB,KAAK,CAACuB,S;;AAmD5B,eAAepB,OAAf","sourcesContent":["import React from 'react';\nimport styles from './../Style/Components/Servers.module.css';\nimport { firestore } from './../Scripts/Firebase';\n//Modules \nimport Server from './Server';\ntype MyProps = { Server_Select: Function, User: any };\ntype MyState = { Active: string, Servers: Map<string, string> };\nclass Servers extends React.Component<MyProps, MyState> {\n  public state: MyState = { Active: '', Servers: new Map() };\n  constructor(props) {\n    super(props);\n    this.state = ({ Active: 'UUw40MdRDcUxdEy00Zuo', Servers: new Map([\n      ['UUw40MdRDcUxdEy00Zuo', 'test']\n    ]) });\n    // create the snapshow listener\n    //  firestore.collection('Users').doc(this.props.User.uid).onSnapshot(async User => {\n    //     if (User.exists) {\n    //       let data = User.data();\n    //       let Saved_Active = localStorage.getItem('Server');\n    //       let Active: string = (Saved_Active && Object.keys(data.Servers).includes(Saved_Active)) ? Saved_Active : Object.keys(data.Servers)[0];\n    //       let Servers: Map<string, string> = new Map(Object.entries(data.Servers));\n    //       this.setState({ Active, Servers });\n    //       this.props.Server_Select(Active, Servers.get(Active))\n    //     }\n    //     // deal with the user not having any servers\n    //   }, () => {}\n    // )\n  }\n  Change_Server(evt, child) {\n    this.setState({Active: child});\n    this.props.Server_Select(child,this.state.Servers.get(child))\n  }\n  render() {\n    return (\n      <section className={styles.Container}>\n        {\n          (() => {\n            let Comps = [];\n            for (let [key, value] of this.state.Servers) {\n              Comps.push(\n                <Server \n                  key={key}\n                  id={key}\n                  Name={value}\n                  Active={this.state.Active}\n                  customClickEvent={this.Change_Server.bind(this)}\n                />\n              );\n            }\n            return Comps;\n          })()\n        }\n        <Server id={this.props.User.uid} Name={this.props.User.displayName} Active={this.state.Active} customClickEvent={this.Change_Server.bind(this)} Self={this.props.User.photoURL}/>\n      </section>\n    );\n  }\n}\n\nexport default Servers;"]},"metadata":{},"sourceType":"module"}